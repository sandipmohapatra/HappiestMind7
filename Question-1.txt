QUESTION-1
------------------------------
There is an endless number line (consisting of only integer positions). You begin at position 0.
N boxes have distinct positions, with the ith box occupying position A[i].
There are additionally M special distinct positions, and the jth position is B[j]. 

You can shift boxes from one position to the left or right in one move. If a box is in the way of your move, you should push it to the next location in that direction.
If another box takes the following spot, that box is likewise pushed to the next position, and so on.
You cannot go through the boxes. You can't pull the boxes towards you. You can make an infinite number of moves.
Find the maximum number of boxes that can be placed in special positions. 

Note
Some boxes can be initially placed in special positions. 

Function Description 
In the provided code snippet, implement the provided specialPositions(...) method.
You can write your code in the space below the phrase "Write Code here".
There will be multiple test cases running so the Input and Output should match exactly as provided. 
The base Output variable result is set to a default value of 0 (Zero) which can be modified. Additionally, you can add or remove these output variables. 

Input Format 
The first line of input contains two space-separated integers N, M. 
The second line of input contains N distinct space-separated integers in the increasing order denoting the initial positions of the boxes. 
The third line of input contains M distinct space-separated integers in the increasing order denoting the special positions. 
 
Sample Input 
5 6                                 --> denotes N, M
-1 1 5 11 15                   --> denotes array A
-4 -3 -2 6 7 15               -->  denotes array B

Constraints 
1<= N, M <= 200000. 
-1*(109)) <= A[i],B[i] <=(109) and a[i]!=0 and b[i]!=0  
 
Output Format
The output contains a single integer denoting the maximum number of boxes that can be placed in special positions. 
 
Sample Output 
4 

Explanation 
We can go 5 to the right: the box on position 1 gets pushed to position 6 and the box on position 5 gets pushed to position 7.
Then we can go 6 to the left to end up on position −1 and push a box to −2.
In the end, the boxes are on positions [−2, 6, 7, 11, 15] respectively.
Among them, positions [−2, 6, 7,15] are special.
Thus, the answer is 4. 


----------------------------------------------------------------------------------------------
QUESTION-2
---------------------------------
Odd Values

You are given a string S which contains only lowercase letters.
X is calculated as per the below rule:
You cannot add two consecutive values of character in maximum sum (if you consider the value of i-th index character of string S in maximum sum then you can not include the value of (i-1)th and (i+1)th index character of string S in maximum sum and you have to maximize the value of X).

Let X be the maximum sum of string S according to the given rules above.

You are also given an integer array A of size N. You have to replace A[i] with A[i]+X (Use operation A[i]=A[i]+X).

You have to print the total number of odd numbers in modified array A.

Note
Consider 0-based indexing of array A and string S.
The value of letters ""a"" = 1, ""b"" = 2, ""c"" = 3…………………..""z"" = 26.

Function Description
In the provided code snippet, implement the provided oddValues(...) method to print the total number of odd numbers in modified array A.
You can write your code in the space below the phrase “WRITE YOUR LOGIC HERE”.
There will be multiple test cases running so the Input and Output should match exactly as provided.
The base Output variable result is set to a default value of -404 which can be modified. Additionally, you can add or remove these output variables.

Input Format
The first line contains string S.
The second line contains the size of array A denoted as N.
The third line contains the elements of array A.

Sample Input
dcaj
4
2 5 9 3

Constraints
1<=|S|<=1000 
1<=N<=1000 
1<=A[i]<=1000

Output Format
The output contains the total number of odd numbers in modified array A. 

Sample Output
3

Explanation
The value of X will be maximum when we will add the 0th index i.e ""d"" = 4 (value=4) and the 3rd index i.e. ""j""=10 (value=10). 
The value of X is 14 (4+10).
Array A[i] after adding with X
2+14 = 16
5+14 = 19
9+14 = 23
3+14 = 17
After modification of the array, there are 3 odd values in the array (19, 23, 17).
Hence, the output is 3.
----------------------------------------------------------------------------------------------------------------------------------------
QUESTION-3
----------------------
Lynda recently purchased a lucky draw ticket but unfortunately, she misplaced it.
She tried to remember the lucky draw ticket number and was able to vaguely remember a number x which could be the ticket number.
It is entirely possible that she can get the order of the digits in the number X wrong.
She could also see some digits multiple times, but the digits she saw are definitely in the real number of lucky draw tickets.  
For example, if she remembered the number as 5205, then some of the possible lucky draw ticket numbers are 5205, 2055, 520, etc. but the number cannot be 20, 55502, or 12340. The number also cannot start with 0, for e.g., 052.
 
Find the total number of lucky draw ticket numbers possible from the given number X.
 
Function Description
In the provided code snippet, implement the provided luckyDraw() method using the variables to print the total number of lucky draw ticket numbers possible. You can write your code in the space below the phrase "Write Code Here".
There will be multiple test cases running so the Input and Output should match exactly as provided. The base Output variable result is set to a default value of 0 which can be modified. Additionally, you can add or remove these output variables.

Input Format
The first line contains an integer x – lucky draw ticket number remembered by Lynda. 
 
Sample Input
5205 
 
Constraints
 1 <= X <= 1018

Output Format
Print the total number of lucky draw ticket numbers possible from the given number x.

Sample Output
13

Explanation
Possible ticket numbers are:
502, 520, 205, 250, 5052, 5025, 5502, 5520, 5205, 5250, 2055, 2505, 2550.
Hence the output is 13.
-------------------------------------------------------------------------------------------------------------
import java.util.*;
import java.io.*;
import java.lang.Math; 
public class Main
{
    public static int luckyDraw(int X) {
        //Write Code Here:     
        return 0;
    }
    public static void main (String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int X = sc.nextInt();
        sc.close();
        System.out.print(luckyDraw(X));
    }
}
-----------------------------------------------------------------------------------------------
Question-4
----------------------
Delete Occurrences
-------------------------------------------- 
 You are given an array of integers A of size N.
 
 You have to perform the following operation: 
 Step1: You need to select a number A[i] from the array.
 Step2: Delete one occurrence of the selected element and delete all the occurrences of A[i]-1 and A[i]+1 (if they exist) in the array.
 Step3: Repeat Step1 and Step2 until the array is empty.
 
 You have to select number A[i] from the array such that the sum of all the selected elements is maximum.
 
 Write a program to maximize the sum of the selected numbers.
 
 Note 
 We have to delete all the occurrences of A[i]+1 and A[i]-1 elements if they are present in the array and not A[i+1] and A[i-1].
 
 Function Description
 In the provided code snippet, implement the provided deleteOccurrences(...) method using the variables to print the maximum sum. You can write your code in the space below the phrase “WRITE YOUR LOGIC HERE”. 
 
 There will be multiple test cases running so the Input and Output should match exactly as provided.
 
 -----------------------------------------------------------------------------------------------------------
import java.util.*; 
 import java.lang.*;
 import java.io.*;
 import java.lang.Math;
 
 public class Main {
  public static int deleteOccurrences(int N, int A[]) {
  
  //this is default OUTPUT. You can change it.
  int result=-404;
  
  //write your Logic here:
  
  
  
  return result;
  }
  public static void main(String[] args) {
  // INPUT [uncomment & modify if required]
  Scanner sc = new Scanner(System.in);
  int N = sc.nextInt();
  
  int A [] = new int[N];
  for(int i=0; i<N; i++) {
  A[i] = sc.nextInt();
  }
  
  // OUTPUT [uncomment & modify if required]
  System.out.print(deleteOccurrences(N,A));
  sc.close();
  }
 }
----------------------------------------------------------------------------------------------------------
solution of question odd value
-------------------------------------
Odd Values

You are given a string S which contains only lowercase letters.
X is calculated as per the below rule:
You cannot add two consecutive values of character in maximum sum (if you consider the value of i-th index character of string S in maximum sum then you can not include the value of (i-1)th and (i+1)th index character of string S in maximum sum and you have to maximize the value of X).

Let X be the maximum sum of string S according to the given rules above.

You are also given an integer array A of size N. You have to replace A[i] with A[i]+X (Use operation A[i]=A[i]+X).

You have to print the total number of odd numbers in modified array A.

Note
Consider 0-based indexing of array A and string S.
The value of letters ""a"" = 1, ""b"" = 2, ""c"" = 3…………………..""z"" = 26.

Function Description
In the provided code snippet, implement the provided oddValues(...) method to print the total number of odd numbers in modified array A.
You can write your code in the space below the phrase “WRITE YOUR LOGIC HERE”.
There will be multiple test cases running so the Input and Output should match exactly as provided.
The base Output variable result is set to a default value of -404 which can be modified. Additionally, you can add or remove these output variables.

Input Format
The first line contains string S.
The second line contains the size of array A denoted as N.
The third line contains the elements of array A.

Sample Input
dcaj
4
2 5 9 3

Constraints
1<=|S|<=1000 
1<=N<=1000 
1<=A[i]<=1000

Output Format
The output contains the total number of odd numbers in modified array A. 

Sample Output
3

Explanation
The value of X will be maximum when we will add the 0th index i.e ""d"" = 4 (value=4) and the 3rd index i.e. ""j""=10 (value=10). 
The value of X is 14 (4+10).
Array A[i] after adding with X
2+14 = 16
5+14 = 19
9+14 = 23
3+14 = 17
After modification of the array, there are 3 odd values in the array (19, 23, 17).
Hence, the output is 3.
-------------------------------------------------------------------------------------
package org.happy;
import java.util.*;
public class tempq 
{
public static void main(String args[])
{
      Scanner scan = new Scanner(System.in);
      int max = 0;
      int count = 0;
      String str = scan.next();
      ArrayList<Integer> ls = new ArrayList<Integer>();
      ArrayList<Integer> lk = new ArrayList<Integer>();
      int n = scan.nextInt();
      while(n-->0)
      {
            int y = scan.nextInt();
            ls.add(y);
      }
      for(int i=0;i<str.length();i++)
      {
            for(int j=i+2;j<str.length();j++)
            {
                  if(j==i)
                  {
                        continue;
                  }
                  else
                  {
                        int num = Integer.valueOf(str.charAt(i)) + Integer.valueOf(str.charAt(j)) - 192;
                        if(num>max)
                        {
                              max=num;
                        }
                  }
            }
      }
      for(int k=0;k<ls.size();k++)
      {
            int c = ls.get(k) + max;
            lk.add(c);
      }
      for(int k=0;k<lk.size();k++)
      {
            if(lk.get(k)%2!=0)
            {
                  count=count+1;
            }
      }
      System.out.println(count);
}
}
-----------------------------------------------------------------------------------------
res = input("Enter the string ")
n = len(s)
l = int(input("Enter the length "))
arr = input("Enter the integer array ").split(" ")
arr = [int(i) for i in arr]
maxsum = [0 for i in range(n)]
t = ord('a')
for i in range(n):
    equi = ord(s[i]) - t + 1
    if i == 0 or i == 1:
        maxsum[i] = equi
    elif i == 2:
        maxsum[i] = maxsum[0] + equi
    else:
        maxsum[i] = equi + max(maxsum[i - 2], maxsum[i - 3])
large = max(maxsum[n - 1], maxsum[n - 2])
arr_mod = [arr[i] + large for i in range(l)]
count = 0
for ele in arr:
    if ele%2 == 1:
        count += 1
print(count)
-------------------------------------------------------------------------------------------
This is the output:
Enter the string dcaj
Enter the length 4
Enter the integer array 2 5 9 3
3
-----------------------------------------------------------