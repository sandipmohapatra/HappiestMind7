Dennis has N friends who are located on a number line. Friend[i] lies at the point A[i] for 0≤i≤N-1.
He has N chocolates with him and is present initially at the origin (0). He can carry K chocolates at a time.
He must collect all the chocolates from the origin and deliver them to his friends and then return to the origin to collect the next batch of chocolates.
Find the minimum distance he needs to cover to deliver all the chocolates to every friend. He does have to return to the origin after he has delivered all the chocolates.

Function Description
In the provided code snippet, implement the provided min_distance() method using the variables to print the minimum distance he needs to cover to deliver all the chocolates to every friend. You can write your code in the space below the phrase "Write Code Here". 

The base Output variable result is set to a default value of 0(Zero) which can be modified. Additionally, you can add or remove these output variables.

Input Format
The first line of input contains two integers N and K denoting the number elements and the number of chocolates he can carry at once respectively.
The second line of input contains N integers denoting the positions of his friends on a number line.

Sample Input
5 1                        --> denotes N and K.
1 2 3 4 5              --> denotes positions of his friends on a number line.

Constraints
1≤ N ≤ 1000
-10000 ≤ a[i]≤ 10000

Output Format
The output contains a single integer denoting the minimum distance Leena needs to cover to deliver all the chocolates to every friend.

Sample Output
25

Explanation
Leena can use the following path as he can carry only one chocolate at a time. 
0->1->0->2->0->3->0->4->0->5.
Hence, he covers a distance of 25 units.
----------------------------------------------------------------------------------------------------------------------
StandardInput														ExpectedOutput
-----------------------------------------------------------------------------------------------------------------------
"10 1 -975 -278 -31 -988 -579 -33 -126 -672 -767 -18"							7946
"9 3 -5 -10 -15 6 5 8 3 7 4"													41
"5 1 1 2 3 4 5"																25
------------------------------------------------------------------------------------------------------------------------
java
----------------------------------
import java.util.*;
import java.io.*;
import java.lang.Math;
public class Main{
    public static int min_distance(int N,int K,int[] A){
        int result = 0;
        //Write Code Here:
        int temp;
        
        for(int i=0;i<N;i++)
        {    
          if(A[i]>0)
        {
          for(int j=i+1;j<N;j++)
          {
               if(A[i]>A[j])
               {
                temp=A[i];
                A[i]=A[j];
                A[j]=temp;
               }
          }
        }
        }
        int i=0,j=0;
        int result1=0;
        if(K>1)
        {
             while(i<N)
             {
                if(A[i]<0)
                {
                  result1=result1+(-A[i]+(-A[K-1]));
                  i=i+K;
                }
                else
                {
                result1=result1+A[i]+A[i+K-1];
                i=i+K;
                }
        }
        }
        if(i==N)
        {
          result1=result1-1;
        }
        else if(K==1)
         {
          for(i=0;i<N;i++)
          {
            if(i==N-1)
            {
                result1=result1+A[i];
              }
              else
                result1=result1 +2*A[i];
              }
             }
             if(result1<0)
             result= -result1;
             else 
             result= result1;


         return result;
      }

        //return result;
    //}
    public static void main (String[]args){
     Scanner sc = new Scanner(System.in);
  int N = sc.nextInt();
  int K = sc.nextInt();
  int[] A = new int[N];
  for (int i = 0; i < N; i++){
  A[i] = sc.nextInt();
  }  
         sc.close();
        System.out.print(min_distance(N,K,A));
    }
}
----------------------------------------------------------------------------------------------------------------------