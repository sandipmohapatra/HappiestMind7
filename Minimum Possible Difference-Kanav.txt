Minimum Possible Difference
 
 You are given an array consisting of N numbers.
 You can perform at most one operation on each element.
 1. if (A[i] mod 2) = 0, divide it by 2. 
 2. if (A[i] mod 2) = 1, multiply it by 2.
 Now you are supposed to use these operations such that Σ|A[i] − A[i − 1]| for all i is minimum.
 So, |A[2] - A[1]| + |A[3] - A[2]| + .... + |A[N] - A[N - 1]| should be the minimum possible.
 
 Function Description
 In the provided code snippet, implement the provided strangeProblem(...) method using the variables to print the pattern for each line from 1 to i. You can write your code in the space below the phrase “WRITE YOUR LOGIC HERE”.
 
 There will be multiple test cases running so the Input and Output should match exactly as provided.
  
 Input Format
 First-line contains N denoting the number of elements in the given array.
 The next line consists of N space-separated integers.
 
 Sample Input
 4
 2 2 4 2
  
 Constraints
 2 <= N <= 10^5
 1 <=A[i] <= 10^9
 
 Output Format
 Output a single line denoting the minimum value of Σ|A[i]−A[i−1]| for all i.
 
 Sample Output
 2
  
 Explanation
 Changing the third element to 2 the array becomes:
 [2, 2, 2, 2]
 hence answer = 2.
-----------------------------------------------------------------------------
import java.util.*;
 import java.io.*;
 import java.lang.Math; 
 public class Main
 {
  public static int strangeProblem(int N,int[]A)
  { 
  int result = 0; 
  //write your Logic here: 
  int sum=0,min=Integer.MIN_VALUE,sumOfDiff=0;
  for(int i=1;i<N;i++)
  {
      if(A[i]>A[i-1])
    	  sumOfDiff=sumOfDiff+(A[i]-A[i-1]);
       else if(A[i-1]>A[i])
    	   sumOfDiff=sumOfDiff+(A[i-1]-A[i]);
       else
    	   sumOfDiff=sumOfDiff+(A[i]-A[i-1]);    
  }
  min=sumOfDiff;
      int[] D=new int[N];
      for(int i=0;i<N;i++)
      {
          if(A[i]%2==0)
          {
              D[i]=A[i];
              A[i]=A[i]/2;
          for(int j=1;j<N;j++)
          {
              if(A[j]>A[j-1])
              sum=sum+(A[j]-A[j-1]);
              else if(A[j-1]>A[j])
              sum=sum+(A[j-1]-A[j]);
              else
              sum=sum+A[j]-A[j-1];
          }
          if(sum>sumOfDiff)
          {
              A[i]=D[i];
              sum=0;
          }
          else
          {  if(sum<min)
          {
              min=sum;
              sum=0;
          }
          else
          sum=0;
          }
          }
          else{
              D[i]=A[i];
              A[i]=A[i]*2;
              for(int j=1;j<N;j++)
              {
                  if(A[j]>A[j-1])
                  sum=sum+(A[j]-A[j-1]);
                  else if(A[j-1]>A[j])
                  sum=sum+(A[j-1]-A[j]);
                  else
                  sum=sum+A[j]-A[j-1];
              }
              if(sum>sumOfDiff)
              {
                  A[i]=D[i];
                  sum=0;
              }
              else if(sum<sumOfDiff)
              {   
                  if(sum<min)
                  {
                      min=sum;
                      sum=0;
                  }
                  else
                  sum=0;
              }
              else
              sum=0;
              }
              }
              

   result=min;
   return result;
  }
  public static void main (String[]args)
  {
  Scanner sc = new Scanner (System.in); 
  int N = sc.nextInt (); 
  int[] A = new int[N];
  for (int i = 0; i < N; i++)
  {
  A[i] = sc.nextInt ();
  } 
  sc.close (); 
  System.out.print(strangeProblem(N,A));
  }
 }