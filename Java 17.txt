Java
-------
1)It is a programming language.By this we can develop standalone application,web application,network appliaction,mobile application.
2)In java we save the file with the class name and the extension will be .java.After compilation it is converted to .class.It is in byte code.
3)Java is platform independent.(we can run java on any OS).
4)Java is simpler than c and c++ because we don't have pointer concept.We don't have operater overloading,multiple Inheritance.
5)In java we have Object oriented Programmings means we have class,object,Inheritance,polymerphisim,abstaction,Encapsulation.
i)class :- It contains variables and methods(collection of datamember and member functions).It is known as object factory.it is also known as blueprint of an object.

ii)object :- it is a reference pointer to a class.With object we can access the variables and methods of a class.It is also called as instance of class.

iii)inheritance :- It is used to reuse the existing code.java supports single inheritance.(multi-level,hirarcal).
when one object acquires all the properties and behaviours of a parent object it is known as Inheritance.
we have five types of inheritance
1)single is supported by java.
2)multi-level is supported by java. 
3)hyrarchal is supported by java.
4)mutiple is not supported by java
5)hybrid is not supported by java.

*in place of multiple and hybrid java use interface .
iv)polymerphisim:- poly means many ,merphisim means forms.
In this we have run time polymerphisim and we have compile time polymerphisim.

method overloading :-means method with same name but it has different datatypes the return type and parameter. 
It is also known as compile time polymerphisim.The compiler will deside to with method it should send the parameters.
example :-int sum(int a,int b);float sum(float a ,float b);

method overriding:- example of abstract class and Interface.we have to take atleast 2 classes for it.
In this the method name will be same and the parameter and return type datatype will be same.

v)abstraction :- Hiding internal mechanism only focusing on functionality.
example we switch on the light the light start glowing.The power generation is hidden only the functionality is displayed.

vi)encapsulation :- exmple :- capsule protect the medicin.Protecting of data and Wrapping up of Data Members and it's associated functions into single unit is known as encapsulation.
Protecting is done by the access specifiers.Java is highly secured.

We have 4 access specifiers in java .
1)private :- if we declare variables and methods as private we can access it within the class only. 
2)public :-if we declare variables and methods as public we can access it within the class ,outside the class and also outside the package. 
3)protected:- if we declare variables and methods as protected we can access it within the class and within the child class also. 
4)default:-if we declare variables and methods as default we can access it within the class ,outside the class but not  outside the package.

6)Java is portable, robust ,multithreaded.
----------------------------------------------------------------------------------------------------------------------------------------
operator
--------------
1)unary operator :- i++,i--,++i,--i
2)binary operator:-
i)Arithmatic :-+,-,*,/,%
ii)relational :->,<,<=,>=,=,!=
iii)logical :-&&,||
iv)bitwise :- &,|
v)shift :- >>,<<,>>>
3)ternary operator:- ?,:
-----------------------------
data type
---------------------
primary data type
-----------------------------
1)byte :- 1 byte 
2)short :- 2 bytes
3)int :- 4 bytes
4)long :- 8 bytes
5)float :- 4 bytes
6)double :- 8 bytes
7)char :- 2 bytes
8)boolean :-1 bit
-----------------------------------------------------
secondary data type (derive data type)
----------------------------------------------------
1)String
2)array
3)class
----------------------------
example-1
-----------------------
//class name should start with capital letters.it should start with number.
package org.sandip;

public class Firstjava 
{
public static void main(String[] args) 
{
	int a=10,b=20,c=a+b;
	System.out.println("the sum of 2 nos is "+c);
}
}
-------------------------------------------------------------------------------------------------------------------------------
example-2
-------------------
package org.sandip;

public class Secondjava 
{
public static void main(String[] args)
{
byte a=10;
short b=20;
float c=34.23f;
double d=34.32;
char e='a';
String f="apple";
int g=67;
long h=765;
System.out.println("the value of a "+a);
System.out.println("the value of b "+b);
System.out.println("the value of c"+c);
System.out.println("the value of d "+d +"the value of e is "+e);
System.out.println("the value of f  is "+f +"the value of g is "+g+"the value of h is "+h);
}
}
--------------------------------------------------------
example-3
--------------------
package org.sandip;
import java.lang.*; //default packages in java 
import java.util.*;//a package in java
public class Third
{
public static void main(String[] args) 
{
	Scanner ob=new Scanner(System.in);//it will take input from the user.
	System.out.println("enter 2 nos");
	int a=ob.nextInt();//accept int value as input
	int b=ob.nextInt();
	int c=a+b;
	System.out.println("the sum of 2 nos is"+c);
}
}
--------------------------------------------------------------------------
wap to enter 5 nos and find sum and average
---------------------------------------------------------
example-4
-----------------
package org.sandip;
import java.lang.*; 
import java.util.*;
public class Third
{
public static void main(String[] args) 
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter 5 nos");
	int a=ob.nextInt();
	int b=ob.nextInt();
	int c=ob.nextInt();
	int d=ob.nextInt();
	int e=ob.nextInt();
	
	System.out.println("the sum of 5 nos is :"+(a+b+c+d+e));
	System.out.println("the avg of 5 nos is :"+(a+b+c+d+e)/5);
	
}
}
----------------------------------------------------------------------------
example-5
-----------------------
package org.sandip;
import java.lang.*; 
import java.util.*;
public class Fourth
{
public static void main(String[] args) 
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter 5 nos");
	float a=ob.nextFloat();
	float b=ob.nextFloat();
	float c=ob.nextFloat();
	float d=ob.nextFloat();
	float e=ob.nextFloat();
	
	System.out.println("the sum of 5 nos is :"+(a+b+c+d+e));
	System.out.println("the avg of 5 nos is :"+(a+b+c+d+e)/5);
	
}
}
--------------------------------------------------------------------------
example-6
------------------
package org.sandip;
public class Third
{
public static void main(String x[])
//main is a method from which the program start executing.the compiler checks for the exact words
{
	String a=x[0];
	String b=x[1];
	String c=x[2];
	String d=x[3];
	System.out.println("the a value is "+a);
	System.out.println("the b value is "+b);
	System.out.println("the c value is "+c);
	System.out.println("the d value is "+d);
	}
}
---------------------------------------------------------------------
example-7
-------------------
package org.sandip;
public class Third
{
public static void main(String x[])
//main is a method from which the program start executing.the compiler checks for the exact words
{
	String a=x[0];
	String b=x[1];
	String c=x[2];
	String d=x[3];
	int sum=Integer.parseInt(a)+Integer.parseInt(b)+Integer.parseInt(c)+Integer.parseInt(d);
		System.out.println("the  sum is "+sum);
		//Integer.parseInt(a) :- convert the string value to integer. 
}
}
---------------------------------------------------------------------------------------------
*public static void main(String x[]) :compiler checks for the exact method.
-------------------------------------------------------------------------------------------------
example-8
------------------------------------
package org.sandip;
public class Third
{
public static void main(String ...x)//jdk1.8
//main is a method from which the program start executing.the compiler checks for the exact words
{
	String a=x[0];
	String b=x[1];
	String c=x[2];
	String d=x[3];
	int sum=Integer.parseInt(a)+Integer.parseInt(b)+Integer.parseInt(c)+Integer.parseInt(d);
		System.out.println("the  sum is "+sum);
		//Integer.parseInt(a) :- convert the string value to integer. 
}
}

---------------------------------------------------------------------------------------------------------------------------------------------------
JVM (Java Virtual Machine) is an abstract machine. It is called a virtual machine because it doesn't physically exist. It is a specification that provides a runtime environment in which Java bytecode can be executed. It can also run those programs which are written in other languages and compiled to Java bytecode.

JVMs are available for many hardware and software platforms. JVM, JRE, and JDK are platform dependent because the configuration of each OS is different from each other. However, Java is platform independent. There are three notions of the JVM: specification, implementation, and instance.

The JVM performs the following main tasks:

Loads code
Verifies code
Executes code
Provides runtime environment
-------------------------------------------------------------------------------------------------------------------------------------------------
JRE is an acronym for Java Runtime Environment. It is also written as Java RTE. The Java Runtime Environment is a set of software tools which are used for developing Java applications. It is used to provide the runtime environment. It is the implementation of JVM. It physically exists. It contains a set of libraries + other files that JVM uses at runtime.
-------------------------------------------------------------------------------------------------------------------------------------
JDK is an acronym for Java Development Kit. The Java Development Kit (JDK) is a software development environment which is used to develop Java applications and applets. It physically exists. It contains JRE + development tools.

JDK is an implementation of any one of the below given Java Platforms released by Oracle Corporation:

Standard Edition Java Platform
Enterprise Edition Java Platform
Micro Edition Java Platform
---------------------------------------------------------------------------------------------------------------------
Memory Management in Java
In Java, memory management is the process of allocation and de-allocation of objects, called Memory management. Java does memory management automatically. Java uses an automatic memory management system called a garbage collector. Thus, we are not required to implement memory management logic in our application. Java memory management divides into two major parts:

JVM Memory Structure
Working of the Garbage Collector
--------------------------------------------------------------------------------------------------
JVM Memory Structure
JVM creates various run time data areas in a heap. These areas are used during the program execution. The memory areas are destroyed when JVM exits, whereas the data areas are destroyed when the thread exits.
--------------------------------------------------------------------------------------------------------------------
Method Area
Method Area is a part of the heap memory which is shared among all the threads. It creates when the JVM starts up. It is used to store class structure, superclass name, interface name, and constructors.
-------------------------------------------------------------------------------------------------------------------------------------
Heap Area
Heap stores the actual objects. It creates when the JVM starts up. The user can control the heap if needed. It can be of fixed or dynamic size. When you use a new keyword, the JVM creates an instance for the object in a heap. While the reference of that object stores in the stack. There exists only one heap for each running JVM process. When heap becomes full, the garbage is collected.
-------------------------------------------------------------------------------------------------------------------------
Stack Area
Stack Area generates when a thread creates. It can be of either fixed or dynamic size. The stack memory is allocated per thread. It is used to store data and partial results. It contains references to heap objects. It also holds the value itself rather than a reference to an object from the heap. The variables which are stored in the stack have certain visibility, called scope.
---------------------------------------------------------------------------------------------------------------
ClassLoader: ClassLoader is a subsystem used to load class files. ClassLoader first loads the Java code whenever we run it.
--------------------------------------------------------------------------------------------------------------------------
Class Method Area: In the memory, there is an area where the class data is stored during the code's execution. Class method area holds the information of static variables, static methods, static blocks, and instance methods.
--------------------------------------------------------------------------------------------------------------
Heap: The heap area is a part of the JVM memory and is created when the JVM starts up. Its size cannot be static because it increase or decrease during the application runs.
----------------------------------------------------------------------------------------------------
Stack: It is also referred to as thread stack. It is created for a single execution thread. The thread uses this area to store the elements like the partial result, local variable, data used for calling method and returns etc.
-------------------------------------------------------------------------------------------------
Native Stack: It contains the information of all the native methods used in our application.
----------------------------------------------------------------------------------------------------------------
Execution Engine: It is the central part of the JVM. Its main task is to execute the byte code and execute the Java classes. The execution engine has three main components used for executing Java classes.
------------------------------------------------------------------------------------------------------------------
Interpreter: It converts the byte code into native code and executes. It sequentially executes the code. The interpreter interprets continuously and even the same method multiple times. This reduces the performance of the system, and to solve this, the JIT compiler is introduced.
-------------------------------------------------------------------------------------------------------------------------------
JIT Compiler: JIT compiler is introduced to remove the drawback of the interpreter. It increases the speed of execution and improves performance.
------------------------------------------------------------------------------------------------------
Garbage Collector: The garbage collector is used to manage the memory, and it is a program written in Java. It works in two phases, i.e., Mark and Sweep. Mark is an area where the garbage collector identifies the used and unused chunks of memory. The Sweep removes the identified object from the Mark
Java Native Interface

Java Native Interface works as a mediator between Java method calls and native libraries.

Java Runtime Environment
It provides an environment in which Java programs are executed. JRE takes our Java code, integrates it with the required libraries, and then starts the JVM to execute it. To learn more about the Java Runtime Environment, click here.
---------------------------------------------------------------------------------------------------------------------------------------------
Conditional statement
--------------------------------------
1)if-----else
2)if-----else if----else if-----else
---------------------------------------------------
example-8
---------------------
package org.tuesday;
import java.util.*;
public class First 
{
public static void main(String[] args)
{
Scanner ob=new Scanner(System.in);//to will take input from the keyboard
System.out.println("enter 2 nos");
int a=ob.nextInt();
int b=ob.nextInt();
if(a>b)
{
	System.out.println("The greatest is "+a);
	System.out.println("greatest is "+a);
}
else
{
	System.out.println("The greatest is "+b);
	System.out.println(" greatest is "+b);
	
}
}
}
-------------------------------------------------------------------
example-9
-----------------------
package org.tuesday;
import java.util.*;
public class First 
{
public static void main(String[] args)
{
Scanner ob=new Scanner(System.in);//to will take input from the keyboard
System.out.println("enter 3 nos");
int a=ob.nextInt();
int b=ob.nextInt();
int c=ob.nextInt();
if(a>b && a>c)
	System.out.println("The greatest is "+a);
	else if(b>a && b>c)
	System.out.println("The greatest is "+b);
	else
		System.out.println("The greatest is "+c);
	}
}
----------------------------------------------------------------------------------------
System.in :- System is a class and in is a object.
System.out.println() :- System is a class ,out is an object and println() is a method.
-------------------------------------------------------------------------------
The predefined class in java will start with capital letter.
------------------------------------------------------------------------------
First ob=new First();
--->First is a class.
--->First() is a construstor.

Scanner ob=new Scanner(System.in);

System.in is a parameter.
Scanner is a class belong to util package. 

System is a class which belong to lang package.
---------------------------------------------------------------------------
package---->classes---->function/methods()
----------------------------------------------------------------
set path=C:\Program Files\Java\jdk-17.0.3.1\bin;.;
--------------------------------------------------------------------
javap java.lang.String
javap java.util.Scanner
--------------------------------------------------------
wap to enter a student's data
rollno,name,address and 3 subjects marks(m1,m2,m3)
find sum and average.
if average greater than 70 print ("first division")
if average greater than 60 print ("second division")
if average greater than 50 print ("third division")
else 
fail
-------------------------------------------------------------------------------------
example-10
---------------------
package org.tuesday;
import java.util.*;
public class Student 
{
public static void main(String[] args)
{
int rollno,m1,m2,m3;
String name,address;
Scanner ob=new Scanner(System.in);//to will take input from the keyboard
System.out.println("enter rollno,name,address,m1,m2,m3");
rollno=ob.nextInt();
name=ob.next();
address=ob.next();
m1=ob.nextInt();
m2=ob.nextInt();
m3=ob.nextInt();
int sum=m1+m2+m3;
int avg=sum/3;
System.out.println("Rollno is: "+rollno +"Name is :"+name+"The address is:"+address);
System.out.println("Sum is: "+sum+"The average is :"+avg);
if(avg>=70)
	System.out.println("First Division");
else if(avg>=60)
	System.out.println("Second Division");
else if(avg>=50)
	System.out.println("Third Division");
else
	System.out.println("Fail");
}
}
-----------------------------------------------------------------------------------------------------
package org.tuesday;
import java.util.*;
public class Student 
{
public static void main(String[] args)
{
String rollno,m1,m2,m3;
String name,address;
Scanner ob=new Scanner(System.in);//to will take input from the keyboard
System.out.println("enter rollno,name,address,m1,m2,m3");
rollno=ob.nextLine();
name=ob.nextLine();
address=ob.nextLine();
m1=ob.nextLine();
m2=ob.nextLine();
m3=ob.nextLine();
int sum=Integer.parseInt(m1)+Integer.parseInt(m2)+Integer.parseInt(m3);
int avg=sum/3;
System.out.println("Rollno is: "+rollno +"Name is :"+name+"The address is:"+address);
System.out.println("Sum is: "+sum+"The average is :"+avg);
if(avg>=70)
	System.out.println("First Division");
else if(avg>=60)
	System.out.println("Second Division");
else if(avg>=50)
	System.out.println("Third Division");
else
	System.out.println("Fail");
}
}
----------------------------------------------------------------------------------
Case and Switch
---------------------------------------
In this we have a value given to the switch.The switch will jump to the particular case execute it and terminate.

switch(2)
{
case 1:
	break;
case 2:
	break;
default:
}

----------------------------------------------------------------------------------
example-11
----------------------
package org.tuesday;
import java.util.*;
public class Second 
{
public static void main(String[] args)
{
Scanner ob=new Scanner(System.in);
System.out.println("enter a no");
int x=ob.nextInt();
switch(x)
{
case 1:System.out.println("one");
break;
case 2:System.out.println("two");
break;
case 3:System.out.println("three");
break;
case 4:System.out.println("four");
break;
case 5:System.out.println("five");
break;
default:
System.out.println("wrong input");
}

	}
}
-----------------------------------------------------------------------
 Bank
---------------
enter accno,name,initial balance=5000.
we have 2 options deposite and withdraw .(case and switch)
after withdraw the minimal balance should be greater or equal to1000.
finally display the accno,name,final balance.
-------------------------------------------------------------------
example-12
--------------------
package org.tuesday;
import java.util.*;
public class Second 
{
public static void main(String[] args)
{
Scanner ob=new Scanner(System.in);
int accno,ibal,fbal;
String name,choice;
System.out.println("enter your accno,name ,ibal and choice");
accno=ob.nextInt();
name=ob.next();
ibal=ob.nextInt();
choice=ob.next();
switch(choice)
{

case "deposite":System.out.println("enter amount to deposite");
int dep=ob.nextInt();
fbal=ibal+dep;
System.out.println("The final balance is "+fbal);
break;

case "withdraw":System.out.println("enter amount to withdraw");
int wdraw=ob.nextInt();
if(ibal-wdraw>=1000)
{
	fbal=ibal-wdraw;
	System.out.println("The final balance is "+fbal);
}
else
{
	System.out.println("The balance is low you cannot withdraw it");
}
break;
default:System.out.println("wrong input");
}
}}
---------------------------------------------------------------------------------------------------------------
Array :- it is a collection of similar data type.The array index start from 0.The memory size is fixed at the begining.
int array,float array......
----------------------------------------------------------------
new is a keyword used to create memory blocks.
---------------------------------------------------------------------
example-13
-------------------------------------------
package org.tuesday;
import java.util.*;
class Second
{
	public static void main(String[] args) 
	{
		Scanner ob=new Scanner(System.in);
	int a[]=new int[5];
	String b[]=new String[5];
	
	System.out.println("enter 5 nos");
	for(int i=0;i<5;i++)
	a[i]=ob.nextInt();
	
	System.out.println("enter 5 string");
	for(int i=0;i<5;i++)
	b[i]=ob.next();
	
	System.out.println("the 5 nos are");
	for(int i=0;i<5;i++)
		System.out.println(a[i]);
	
	System.out.println("the 5 strings are");
	for(int i=0;i<5;i++)
		System.out.println(b[i]);
		
	}
}
-----------------------------------------------------------------------------------------
example-14
---------------------
package org.tuesday;
import java.util.*;
class Second
{
	public static void main(String[] args) 
	{
		Scanner ob=new Scanner(System.in);
	int a[][]=new int[3][3];
	
	System.out.println("enter 3*3 matrix");
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<3;j++)
		{
	a[i][j]=ob.nextInt();		
}		}
	
	System.out.println("the 3*3 matrix is");
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<3;j++)
		{
			System.out.print(a[i][j]+"   ");
		}
		System.out.println();	}			
}}
----------------------------------------------------------------------------------------------------
example-15
----------------------
package org.tuesday;
import java.util.*;
class Second
{
	public static void main(String[] args) 
	{
		Scanner ob=new Scanner(System.in);
	int a[][]=new int[3][3];
	int b[][]=new int[3][3];
	int c[][]=new int[3][3];
	
	System.out.println("enter 3*3 matrix");
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<3;j++)
		{
	a[i][j]=ob.nextInt();		
	}		}
	
	
	System.out.println("enter 3*3 matrix");
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<3;j++)
		{
	b[i][j]=ob.nextInt();		
	}		}
	
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<3;j++)
		{
	c[i][j]=a[i][j]+b[i][j];		
	}		}
	
	System.out.println("the 3*3 matrix is");
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<3;j++)
		{
			System.out.print(c[i][j]+"   ");
		}
		System.out.println();	
		}
	}}
-----------------------------------------------------------------------------------------------------------
example-16
-----------------------
package org.tuesday;
import java.util.*;
class Second
{
	int rollno;//intance variable can be accessed through out the class
	String name,address;
	void input()
	{
	int x=10;//local variable can be accessed within the method	
		Scanner ob=new Scanner(System.in);
		System.out.println("Enter rollno,name,address");
		rollno=ob.nextInt();
		name=ob.next();
		address=ob.next();
	}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
public static void main(String[] args) 
{
Second ob=new Second();
//Second is the class name,ob is the object or ref pointer,new is keyword which will create a memory block,Second() is a constructor
ob.input(); //with the object we can access variables and methods of a class.
ob.display();
System.out.println(ob.rollno);
System.out.println(ob.name);
System.out.println(ob.address);
}
}
-------------------------------------------------------------------------------------------------------------------------

example-17
------------------------
//how to create array of objects.

package org.tuesday;
import java.util.*;
class Second
{
	int rollno;
	String name,address;
	void input()
	{
	int x=10;
		Scanner ob=new Scanner(System.in);
		System.out.println("Enter rollno,name,address");
		rollno=ob.nextInt();
		name=ob.next();
		address=ob.next();
	}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
public static void main(String[] args) 
{
	Scanner ob1=new Scanner(System.in);
	System.out.println("how many objects want to create");
	int x=ob1.nextInt();
Second[] ob=new Second[x]; 

for(int i=0;i<x;i++)
{
ob[i]=new Second();
	ob[i].input(); 
}

for(int i=0;i<x;i++)
{
	ob[i].display(); 
}

}
}
-------------------------------------------------------------------------
example-18
-----------------------
//how to create array of objects.

package org.tuesday;
import java.util.*;
class Second
{
	int rollno;
	String name,address;
	void input()
	{
	int x=10;
		Scanner ob=new Scanner(System.in);
		System.out.println("Enter rollno,name,address");
		rollno=ob.nextInt();
		name=ob.next();
		address=ob.next();
	}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
public static void main(String[] args) 
{
	Scanner ob1=new Scanner(System.in);
	System.out.println("how many objects want to create");
	int x=ob1.nextInt();
Second[] ob=new Second[x]; 

for(int i=0;i<x;i++)
{
ob[i]=new Second();
	ob[i].input(); 
}

System.out.println("enter the rollno whose details you want to display");
int temp=ob1.nextInt();
int z=0;
for(int i=0;i<x;i++)
{
	if(ob[i].rollno==temp)
	{
	ob[i].display();
	z++;
	}}
if(z==0)
System.out.println("data not found");
}}
//---------------------------------------------------------------------
//bank customer:- accno,name,balance
//enter the accno to see particular customer details... 
//---------------------------------------------------------------------

constructor:- constructor is a function which has the same name of that of the class name.
it doesnot have return type nor it returns any value.
a constructor excute automatically when an object is created for the class.
There are 2 types of contructor 
1)default constructor
2)parameterized constructor
------------------------------------------
example-19
-------------------
package org.wednesday;

public class ConstructorDemo 
{
int rollno; //intance variable
String name,address;
ConstructorDemo()
{
	System.out.println("default constructor");
}
ConstructorDemo(int rollno,String name,String address)//local variables
{
	//to distingush between local and instance variable we use this keyword
	this.rollno=rollno;
	this.name=name;
	this.address=address;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
public static void main(String[] args) 
{
	ConstructorDemo ob=new ConstructorDemo();
	ConstructorDemo ob1=new ConstructorDemo(1,"sandip","Bangalore");
	ob1.display();
	ConstructorDemo ob2=new ConstructorDemo(2,"kiran","Bangalore");
	ob2.display();
}
}
---------------------------------------------------------------------
example-20
----------------------
package org.wednesday;

public class ConstructorDemo 
{
int rollno; //intance variable
String name,address;
ConstructorDemo()
{
	System.out.println("default constructor");
}
ConstructorDemo(int rollno,String name,String address)//local variables
{
	//to distingush between local and instance variable we use this keyword
	this.rollno=rollno;
	this.name=name;
	this.address=address;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
int sum(int a,int b)   //return type is int
{
	return a+b;
}
float sum(float a,float b)  //return type is float
{
	return a+b;
}
public static void main(String[] args) 
{
	ConstructorDemo ob=new ConstructorDemo();
	ConstructorDemo ob1=new ConstructorDemo(1,"sandip","Bangalore");
	ob1.display();
	ConstructorDemo ob2=new ConstructorDemo(2,"kiran","Bangalore");
	ob2.display();
	
	System.out.println("the sum of 2 nos are "+ob.sum(13, 34));
	System.out.println("the sum of 2 nos are "+ob.sum(13.4f, 34.7f));
	System.out.println("the sum of 2 nos are "+ob.sum(133, 134));
}
}
--------------------------------------------------------------------
function/method :-
They can have any name other than the class name.It return a value and has return type.
if it doesnot return any value we use the keyword void.
if you are using the same function name with different return type and datatypes of the parameters are different then it is known as function overloading .
It is also known as compile time poly-merphisim.
The compiler will deside where to send the parameters.
------------------------------------------------------------------------------------------------------------
package org.wednesday;

public class ConstructorDemo 
{
int rollno; //intance variable
String name,address;
ConstructorDemo()
{
	System.out.println("default constructor");
}
ConstructorDemo(int r,String n,String a)//local variables
{
	//to distingush between local and instance variable we use this keyword
	rollno=r;
	name=n;
	address=a;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
int sum(int a,int b)   //return type is int
{
	return a+b;
}
float sum(float a,float b)  //return type is float
{
	return a+b;
}
int sum(int a,int b,int c)
{
	return a+b+c;
}

public static void main(String[] args) 
{
	ConstructorDemo ob=new ConstructorDemo();
	ConstructorDemo ob1=new ConstructorDemo(1,"sandip","Bangalore");
	ob1.display();
	ConstructorDemo ob2=new ConstructorDemo(2,"kiran","Bangalore");
	ob2.display();
	
	System.out.println("the sum of 2 nos are "+ob.sum(13, 34));
	System.out.println("the sum of 2 nos are "+ob.sum(13.4f, 34.7f));
	System.out.println("the sum of 2 nos are "+ob.sum(133, 134));
	System.out.println("the sum of 2 nos are "+ob.sum(13,14,15));
	}
}
------------------------------------------------------------------------------------------
//wap to enter 3 employees details and display it.
empno,name,salary,design using constructor.
-----------------------------------------------------------------------------
example-21
------------------------
package org.wednesday;

public class ConstructorDemo 
{
	int empno,salary;
	String name,design;
	
	public ConstructorDemo()
	{
	System.out.println("default constructor");
	}

	public ConstructorDemo(int empno, int salary, String name, String design) 
	{
		
		this.empno = empno;
		this.salary = salary;
		this.name = name;
		this.design = design;
	}
	
	void display()
	{
		System.out.println("the empno is "+empno);
		System.out.println("the name is "+name);
		System.out.println("the salary is "+salary);
		System.out.println("the design is "+design);
		}
	public static void main(String[] args) 
	{
		ConstructorDemo ob1=new ConstructorDemo(101,67000,"sandip","Developer");
		ob1.display();
		ConstructorDemo ob2=new ConstructorDemo(102,167000,"kiran","Developer");
		ob2.display();
		ConstructorDemo ob3=new ConstructorDemo(103,267000,"madhu","Developer");
		ob3.display();
	
	}
}
----------------------------------------------------------------------------------------------------------------------------
example-22
-----------------
package org.wednesday;
import java.util.*;
public class ConstructorDemo 
{
	int empno,salary;
	String name,design;
	
	public ConstructorDemo()
	{
	System.out.println("default constructor");
	}

	public ConstructorDemo(int empno, int salary, String name, String design) 
	{
		
		this.empno = empno;
		this.salary = salary;
		this.name = name;
		this.design = design;
	}
	
	void display()
	{
		System.out.println("the empno is "+empno);
		System.out.println("the name is "+name);
		System.out.println("the salary is "+salary);
		System.out.println("the design is "+design);
		}
	public static void main(String[] args) 
	{
		ConstructorDemo[] x=new ConstructorDemo[3];
		for(int i=0;i<3;i++)
		{
			Scanner ob=new Scanner(System.in);
			System.out.println("enter empno,salary,name,designation");
			int e=ob.nextInt();
			int s=ob.nextInt();
			String n=ob.next();
			String d=ob.next();
			x[i]=new ConstructorDemo(e,s,n,d);
		}
		for(int i=0;i<3;i++)
		{
		x[i].display();
		}
		
		ConstructorDemo ob1=new ConstructorDemo(101,67000,"sandip","Developer");
		ob1.display();
		ConstructorDemo ob2=new ConstructorDemo(102,167000,"kiran","Developer");
		ob2.display();
		ConstructorDemo ob3=new ConstructorDemo(103,267000,"madhu","Developer");
		ob3.display();
	
	}
}
-----------------------------------------------------------------------------------------------------------------------	
Inheritance
---------------------
1)It is used to reuse the existing code.
example:- (jkd1.1,jdk1.2,jdk1.3,..........jdk18).
2)java support single inheritance .
i)single inheritance
ii)multi-level inheritance
iii)hyrarchal inheritance.
3)It makes the program tight coupled.
4)we use the keyword (super)---- to access the parent class variables and methods into the child class.
we use the keyword (extends)----to inheritate the parent class into the child class.
 5)we will create object for the child class only and can access the parent class variables and methods.
------------------------------------------------------
example-23
---------------------
package org.wednesday;
public class Student 
{
int rollno;
String name,address;
public Student(int rollno, String name, String address) 
{
	this.rollno = rollno;
	this.name = name;
	this.address = address;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
}
------------------------------------------------------------------------------------------------
package org.wednesday;

public class Marks extends Student 
{
int m1,m2,m3,sum,avg;

public Marks(int rollno, String name, String address, int m1, int m2, int m3)
{
	super(rollno, name, address);
	this.m1 = m1;
	this.m2 = m2;
	this.m3 = m3;
}
void display()
{
	super.display();
	sum=m1+m2+m3;
	avg=sum/3;
	System.out.println("the sum is "+sum);
	System.out.println("the avg is "+avg);
	if(avg>=70)
	System.out.println("first div");
	else if(avg>=60)
		System.out.println("second div");
	else if(avg>=50)
		System.out.println("third div");
	else
		System.out.println("fail");
}
public static void main(String[] args)
{
	Marks ob=new Marks(101,"sandip","Bangalore",66,77,88);
	ob.display();
}
}
----------------------------------------------------------------------------------------------------
wap to create a bank class -----accno,name,balance
create a transaction class extends bank class -----withdraw,deposite
and display the final balance.
----------------------------------------------------------------------------------------------
Example-24
-------------------
package org.wednesday;

public class Bank 
{
int accno,bal;
String name;
public Bank(int accno, int bal, String name) 
{
	this.accno = accno;
	this.bal = bal;
	this.name = name;
}
void display()
{
	System.out.println("the accno is :"+accno+ "the name is "+name +"the bal is "+bal);
}
}
----------------------------------------------------------------
package org.wednesday;
import java.util.*;
public class Transaction extends Bank 
{
	public Transaction(int accno, int bal, String name) 
	{
		super(accno, bal, name);
	}
void withDraw()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter the amount to withdraw");
	int wdraw=ob.nextInt();
	if(bal-1000>=wdraw)
	{
		int fbal=bal-wdraw;
		System.out.println("the remaining balance is "+fbal);
	}
	else 
	{
		System.out.println("invalid input");
	}
	
}
void deposite()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter the amount to deposite ");
	int dep=ob.nextInt();
	System.out.println("the final balance is "+(bal=bal+dep));
}
public static void main(String[] args) 
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter accno,name,initial balance");
	int acc=ob.nextInt();
	String name=ob.next();
	int ibal=ob.nextInt();
	Transaction ob1=new Transaction(acc,ibal,name);
ob1.display();
System.out.println("enter your choice");

String choice=ob.next();
if(choice.equals("withdraw"))
{
	ob1.withDraw();
}
else
{
	ob1.deposite();
}
}
}
------------------------------------------------------------------------------------------------------
encapsulation :-This will protect the data from been accesed by other class.We use the access specifier private to make the data protected.
---------------------------------------------------------------------------------------------------------
data abtraction:-hiding the complexcity and displaying the simplicity is known as data abstraction.
within class we have methods .within the methods we have complex algorithim  .but outside the class in the main we create object and access the methods.
------------------------------------------------------------------------------------------------------------------------
example-25
------------------------
package org.wednesday;
public class Employee 
{
private int empno;
private String name,address;
public int getEmpno() {
	return empno;
}
public void setEmpno(int empno) {
	this.empno = empno;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getAddress() {
	return address;
}
public void setAddress(String address) {
	this.address = address;
}
}
--------------------------------------------------------------------
package org.wednesday;

public class EmpDetails
{
public static void main(String[] args)
{
Employee ob=new Employee();
ob.setEmpno(101);
ob.setName("sandip");
ob.setAddress("Bangalore");
System.out.println("the empno is "+ob.getEmpno());
System.out.println("the empname is "+ob.getName());
System.out.println("the empaddress is "+ob.getAddress());
}
}
-------------------------------------------------------------------------------------------
wrapper class
----------------------
All datatypes in java are also classes known as wrapper class.
byte --Byte
short -- Short
int -- Integer
long -- Long
float -- Float
double -- Double
char -- Character
String---- is a datatype and a class. 
boolean -- Boolean
all these classes belongs to lang package.
package --- classes --- methods
*
javap java.lang.String
-------------------------------------------------------------------------------------------------------------------
1)Inheritance (is-a relationship)
2)Aggregation(Has-a relationship)

has-a relationship(employee has a address)
-----------------------------------------------------------------------------------
example-26
---------------------------------------------------------
package org.thursday;

public class Address 
{
int streetno,houseno;
String place,city,state;
public Address(int streetno, int houseno, String place, String city, String state) {
	this.streetno = streetno;
	this.houseno = houseno;
	this.place = place;
	this.city = city;
	this.state = state;
}
@Override
public String toString() 
{
	return "Address [streetno=" + streetno + ", houseno=" + houseno + ", place=" + place + ", city=" + city + ", state="
			+ state + "]";
}}
---------------------------------------------------------------------------------------------
package org.thursday;

public class Employee 
{
int empno;
String name,design;
Address add;
public Employee(int empno, String name, String design, Address add) 
{
	this.empno = empno;
	this.name = name;
	this.design = design;
	this.add = add;
}

void display()
{
	System.out.println("the empno is "+empno);
	System.out.println("the name is "+name);
	System.out.println("the design is "+design);
	System.out.println("the address is "+add);
	
}
public static void main(String[] args) 
{
	Address ob=new Address(10,204,"electronic-city","Bangalore","Karnataka");
	Employee ob1=new Employee(1001,"Sandip","dev",ob);
	ob1.display();
}
}
----------------------------------------------------------------------------------------------------------------------
customer has a bank account
-------------------------------------------------
customer ---name,address,phoneno
bank---bname,accno,balance
--------------------------------------------------------------
static:-It is a keyword.
we can declare a variable as static.
we can declare a method as static.
we can a static block.
we can even declare a class as static.It is incase of inner class.
we need not  create an object to access the static variable,static method and static block is automatically executed first before the main method.
when we declare static a single copy is send to the JVM.
we cannot add a static variable with non static variable.
we cannot access a non static variable inside a static method.
----------
example-27
-------------
package org.thursday;

public class StaticDemo 
{
static int a=10;
static void display()
{
	System.out.println("This is a static method");
}
static
{
	System.out.println("This is a static block");
}
public static void main(String[] args) 
{
System.out.println("the value of a is :"+a);
display();
}
}
----------------------------------------------------------------------------------------------------------
example-28
---------------------
package org.thursday;

public class StaticDemo 
{
static int a=10;
static void display()
{
	System.out.println("This is a static method");
}
static
{
	System.out.println("This is a static block");
}
public static void main(String[] args) 
{
System.out.println("the value of a is :"+StaticDemo.a);
StaticDemo.display();
}
}
----------------------------------------------------------------------------------------------
package org.thursday;

public class StaticDemo 
{
	 static int a=0;
	 static int b=20,c=a+b;
static void display()
{
	int a=20;
	System.out.println(a);
	System.out.println("This is a static method");
	System.out.println("The sum is "+c);
}
static int increment()
{
	System.out.println(a);
	return a++;
}
static
{
	System.out.println("The sum is "+c);
	System.out.println("This is a static block");
}
public static void main(String[] args) 
{
	
System.out.println("the value of a is :"+StaticDemo.a);
StaticDemo.display();
increment();
increment();
increment();
increment();
increment();
increment();
increment();
increment();
}
}
---------------------------------------------------------------------------------------------------------
package org.thursday;

public class StaticDemo 
{
	 static int a=10;
	 static int b=20,c=a+b;
static void display()
{
	int  a=20;
	System.out.println("inside the display method"+a);
	System.out.println("This is a static method");
	System.out.println("The sum is "+c);
}
static int increment()
{
	System.out.println(a);
	return a++;
}
static
{
	System.out.println("The sum is "+c);
	System.out.println("This is a static block");
}
public static void main(String[] args) 
{
	int a=30;
	System.out.println("inside the main "+a);
System.out.println("the value of a is :"+StaticDemo.a);
StaticDemo.display();
increment();
increment();
increment();
increment();
increment();
increment();
increment();
increment();
}
}
-------------------------------------------------------------------------------------------------------------
final:-
----------------
we can declare a class a final.variable as final and method as final.
If we declare class as final we cannot extend/inherite it.
If we declare a variable as final we have to assign it and it cannot be changed.
If we declare method as final we cannot override it.
final means it cannot be changed.It is used for security reasons.
-----------------------------------------------------------------------
example-27
-------------------
package org.thursday;

public final class Finaldemo 
{
final int a=10;
final void display()
{
	System.out.println("this is a final method");
}
public static void main(String[] args) 
{
Finaldemo fd=new Finaldemo();
System.out.println("the value of a is "+fd.a);
fd.display();
}
}
--------------------------------------------------------------------------------------------------------
abstract class
----------------------
abstract class is a class which contains abstract methods and concret methods(nornal methods or methods with body)
we cannot create object of an abstract class we have to inherite it into a class override the abstract methods and create object for this class.
abstract class is a incomplete class.
--------------------------------------------
example-29
--------------------
package org.thursday;

 abstract class Abstractdemo1 
{
abstract void deposite();//incomplete methods don't have body
abstract void withdraw();
void displaybal()   //concrete method with body
{
	System.out.println("this is the final balance");
}
}

public class Abstractdemo extends Abstractdemo1 
{
	@Override
	void deposite() 
	{
		System.out.println("this is a deposite method");
	}

	@Override
	void withdraw() {
		System.out.println("this is a withdraw method");
			}
	public static void main(String[] args) 
	{
		Abstractdemo  ob=new Abstractdemo();
		ob.deposite();
		ob.displaybal();
		ob.withdraw();
	}
}
-------------------------------------------------------------------------------------------------------------
package org.thursday;

 abstract class Abstractdemo1 
{
void deposite()
{
	System.out.println("deposite");
}
void displaybal()   //concrete method with body
{
	System.out.println("this is the final balance");
}
}
 
 abstract class Abstractdemo2 extends Abstractdemo1
 {
 abstract void deposite();
 abstract void withdraw();
  }

 public class Abstractdemo extends Abstractdemo2 
{
	@Override
	void deposite() 
	{
		System.out.println("this is a deposite method");
	}

	@Override
	void withdraw() {
		System.out.println("this is a withdraw method");
			}
	public static void main(String[] args) 
	{
		Abstractdemo  ob=new Abstractdemo();
		ob.deposite();
		ob.displaybal();
		ob.withdraw();
	}
}
-------------------------------------------------------------------------------------------------
Interface------
In this it contains abstract methods only.we don't use the keyword abstract.
By interface we can perform multiple inheritance.
we use the keyword interface and implements.
we can extend a interface into another interface.
if we declare a variable in a interface it is bydefault public static and final.
while overriding the methods should be public.
we cannot create object of an interface.
--------------------------------------------------------------------------------------------------

example-30
-----------------
package org.thursday;

public interface InterfaceDemo
{
	public static final int a = 10;
void inputdata();
}

 interface InterfaceDemo1
{
void inputdata1();
}

 interface InterfaceDemo2 extends InterfaceDemo1
 {
 void inputdata2();
 }
----------------------------------------------------------------
package org.thursday;

public class InterfaceTest implements  InterfaceDemo,InterfaceDemo2
{

	@Override
	public void inputdata1() {
		System.out.println("this is method1");
		
	}

	@Override
	public void inputdata2() {
		System.out.println("this is method2");
		
	}

	@Override
	public void inputdata() {
		
		System.out.println("this is method3");	
	}
	public static void main(String[] args) {
		InterfaceTest ob=new InterfaceTest();
		System.out.println(a);
		System.out.println(InterfaceTest.a);
		ob.inputdata();
		ob.inputdata1();
		ob.inputdata2();
	}

}
-----------------------------------------------------------------------------------------------------
Array is a collection of similar elements(datatypes) or homogeneous (datatype) elements.
int[] a=new int[5]; 
The memory block is fixed.
----------------------------------------------------------------------
Collection framework:-
1)It is a collection of objects.We can also store data in the form of primative datatype.
2)It increases dynamically when elements are added to it.
3)It decreases  dynamically when we remove elements from it.
4)It belongs to util package
--------------------------------------------------------------------------------------------------
we have 3 interfaces
1)set(interface)---->classes(HashSet,TreeSet,LinkedHashSet)
in this we cannot enter duplicate data.
2)list(interface)---->classes(LinkedList,ArrayList,Vector,Stack)
3)Map(interface)---->classes(HashMap,HashTable)
------------------------------------------------------------------------------------------------
HashSet:-It will display in random order.
TreeSet:-It displays in shorted order.
LinkedHashSet:-It will display the elements in the same order.
--------------------------------------------------------------------------------
example-31
---------------------
package org.friday;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args) 
{
Set<Integer> ob=new TreeSet<Integer>();
ob.add(30);
ob.add(50);
ob.add(40);
ob.add(20);
ob.add(10);
ob.add(70);
ob.add(60);
System.out.println(ob);
}
}
------------------------------------------------------------------------------------
example-32
--------------------------
package org.friday;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args) 
{
TreeSet<String> ob=new TreeSet<String>();
ob.add("orange");
ob.add("grapes");
ob.add("banana");
ob.add("apple");
ob.add("annar");
ob.add("lichi");
ob.add("guava");
System.out.println(ob);
}
}
--------------------------------------------------------------------------------------
example-33
-------------------
package org.friday;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args) 
{
HashSet<Integer> ob=new HashSet<Integer>();
ob.add(30);
ob.add(50);
ob.add(40);
ob.add(20);
ob.add(10);
ob.add(70);
ob.add(60);
System.out.println(ob);
}
}
-----------------------------------------------------------------
Example-34
---------------------
package org.friday;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args) 
{
LinkedHashSet<Integer> ob=new LinkedHashSet<Integer>();
ob.add(30);
ob.add(50);
ob.add(40);
ob.add(20);
ob.add(10);
ob.add(10);
ob.add(10);
ob.add(70);
ob.add(60);
System.out.println(ob);
}
}
----------------------------------------------------------------------------
list(interface)---->classes(LinkedList,ArrayList,Vector,Stack)

LinkedList :- it will display the data in same order and it will also display the duplicate data.
--------------------------------------------
example-35
-------------------
package org.friday;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args) 
{
LinkedList<Integer> ob=new LinkedList<Integer>();
ob.add(30);
ob.add(50);
ob.add(40);
ob.add(20);
ob.add(10);
ob.add(10);
ob.add(10);
ob.add(70);
ob.add(60);
System.out.println(ob);
}
}
-------------------------------------------------------------------------------------------------
example-36
-----------------
package org.friday;
public class Student
{
int rollno;
String name,address;
public Student(int rollno, String name, String address)
{
	this.rollno = rollno;
	this.name = name;
	this.address = address;
}
@Override
public String toString() 
{
	return "Student [rollno=" + rollno + ", name=" + name + ", address=" + address + "]";
}
}
---------------------------------------------------------------------------------------------
package org.friday;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args) 
{
LinkedList<Student> ob=new LinkedList<Student>();
Student obj1=new Student(101,"sandip","Bangalore");
Student obj2=new Student(102,"Kiran","Bangalore");
Student obj3=new Student(103,"sunil","Hyd");
Student obj4=new Student(104,"Madhu","Pune");
ob.add(obj1);
ob.add(obj2);
ob.add(obj3);
ob.add(obj4);
System.out.println(ob);

}
}
-------------------------------------------------------------------------------------------------------------
assignment-1
---------------------------  
employee class :-empno,name,salary,designation

and add the obaject to the linked list.
--------------------------------------------------------------------------------------------------------------------
example-37
---------------------
package org.friday;
import java.util.LinkedList;
public class LinkedListExample 
{
public static void main(String[] args) {
	LinkedList ls=new LinkedList();
	ls.add(10);
	ls.add(20);
	ls.add(10);
	ls.add(30);
	ls.add(10);
	ls.add(40);
	ls.add("apple");
	ls.addFirst(100);
	ls.addLast(200);
	System.out.println(ls.contains(150));//return boolean value
	System.out.println(ls.contains(100));
	System.out.println(ls);
	}
}
-----------------------------------------------------------------------------------------------------
example-38
-----------------------
import java.util.*;
public class Treeexample 
{
	public static void main(String[] args) 
	{	
		HashSet hs=new HashSet();
		   System.out.println(hs.isEmpty());//return boolean value(true)
		   System.out.println(hs.size());
		    hs.add(10);    hs.add(30);    hs.add(40);    hs.add(80);    hs.add(100);     hs.add(10);
		   System.out.println(hs);
		   System.out.println(hs.isEmpty());
		   System.out.println(hs.size());
		   System.out.println(hs.contains(30));
		   System.out.println(hs.contains(300));
		      hs.remove(100);
		   System.out.println(hs);     hs.clear();System.out.println(hs);   System.out.println(hs.size());
	}}
------------------------------------------------------------------------------------------------------------------------------
example-39
--------------------
package org.friday;
import java.util.*;
public class Treeexample 
{
	public static void main(String[] args) 
	{	
		HashSet hs=new HashSet();
	    hs.add(10);
	    hs.add(30);
	    hs.add(40);
	    hs.add(80);
	    hs.add(100);
	    hs.add("apple");
	   System.out.println(hs);
	//To retrieve obj by for each 
	   for(Object obj:hs)
	{
	   System.out.println(obj);
	  }	}}
-------------------------------------------------------------------------------
example-40
----------------------
package org.friday;
import java.util.*;
public class Treeexample 
{
	public static void main(String[] args) 
	{	
		Stack ss=new Stack();//FILO
	    ss.push(10);
	    ss.push(20);
	    ss.push(30);
	    ss.push(40);
	    ss.push(50);
	    ss.push(60);
	    ss.push(70);
	    ss.push(10);
	System.out.println(ss);
	System.out.println(ss.pop());//remove item from stack
	System.out.println(ss);
	System.out.println(ss.peek());//detect first item in stack but dont delete
	System.out.println(ss);
	System.out.println(ss.search(20));//display the index start from 1
	System.out.println(ss.search(200));//display -1 if not there     
	  }	}
-----------------------------------------------------------------------------------------------
example-41
-----------------------------------------------------
import java.util.*;
public class Treeexample 
{
	public static void main(String[] args) 
	{	
		ArrayList<Integer> al=new ArrayList<Integer>();
	     al.add(10);
	     al.add(50);
	     al.add(60);
	     al.add(100);
	      al.add(90);
	      al.add(80);
	System.out.println(al);
	al.add(3,500);                 //100 will move next position
	System.out.println(al);
	al.remove(2);                //remove 60
	System.out.println(al);
	al.set(4,1000);              //replace 90 with 1000
	System.out.println(al);
	  }	}
----------------------------------------------------------------------------------
example-42
--------------------
package org.monday;
import java.util.*;
public class LinkListDemo 
{
	public static void main(String[] args) 
	{	
		 LinkedList<Integer> ll=new LinkedList<Integer>();
		  LinkedList<Integer> ll1=new LinkedList<Integer>();
		       ll1.add(100);      ll1.add(200);     ll1.add(300);      ll1.add(400);
		       ll.add(10);     ll.add(40);      ll.add(20);     ll.add(80);    ll.add(90);      ll.add(50);
		  System.out.println(ll1);		 
		 System.out.println(ll);
		         ll.addFirst(100);
		System.out.println(ll);
		        ll.addLast(200);
		System.out.println(ll);
		         ll.removeFirst();
		         ll.removeLast();
		  System.out.println(ll);
		  System.out.println(ll.getFirst());
		  System.out.println(ll.getLast());
		   ll.addAll(ll1);
		  System.out.println(ll);
}
}
-------------------------------------------------------------------------------------------------
Display the elements of the collection
----------------------------------------------------------------------
1)for(String ob:ls)  
for(Object ob:ls)
2)System.out.println(ls);
3)Iterator it=ls.iterator()
Iterator is a interface.iterator() is a method.
It has 2 methods i)hasNext() ii)next()
4)ListIterator()
In this we can iterate in both directions.
forward and backward.
------------------------------------------
i)hasNext() ii)next() iii)hasPrevious() iv)Previous()
--------------------------------------------------------------------------------
example-43
---------------------------------------------
package org.monday;
import java.util.*;
public class LinkListDemo 
{
	public static void main(String[] args) 
	{
	LinkedList<String> ls=new LinkedList<String>();
	ls.add("banana");
	ls.add("apple");
	ls.add("grapes");
	ls.add("lichi");
	System.out.println(ls);
	System.out.println("*******************************");
	//for each loop
	for(String ob:ls)
		System.out.println(ob);
	System.out.println("*******************************");
	Iterator it=ls.iterator();//interface it has 2 methods hasNext(),next()
	while(it.hasNext())
	{
		System.out.println(it.next());
	}
}
}
----------------------------------------------------------------------------------------------------
example-44
-------------------------
package collection;
import java.util.*;
public class CollectionTest 
{
public static void main(String[] args) 
{
LinkedList<String> ls=new LinkedList<String>();
ls.add("banana");
ls.add("apple");
ls.add("grapes");
ls.add("lichi");
System.out.println(ls);
System.out.println("*******************************");
for(Object ob:ls)
	System.out.println(ob);
System.out.println("*******************************");
Iterator it=ls.iterator();
while(it.hasNext())
{
	System.out.println(it.next());
}
System.out.println("*******************************");
ListIterator li=ls.listIterator();
while(li.hasNext())
{
	System.out.println(li.next());
}
System.out.println("*******************************");
while(li.hasPrevious())
{
	System.out.println(li.previous());
}}}
------------------------------------------------------------------------------------------------------------------------
example-45
-------------------------------------------------------------------------------------------------------------------------
HashMap:- In this we enter key and value pair.Key cannot be duplicate.

package collection;
import java.util.*;
public class HashMapExample 
{
public static void main(String[] args) {
	HashMap<Integer,String> hm=new HashMap<Integer,String>();
	hm.put(1, "Abhinav");
	hm.put(2, "Anna");
	hm.put(3, "Aditya");
	hm.put(4, "Kundan");
	hm.put(5, "Riya");
	hm.put(5, "Sandip");
	System.out.println(hm);
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno and name");
	int rollno=ob.nextInt();
	String name=ob.next();
	hm.put(rollno,name);
	System.out.println(hm);
}
}
-------------------------------------------------------------------------------------------------------
*The main purpose of using Set in HashMap is we don't have the Iterator interface for HashMap.
-------------------------------------------------------------------  

HashMap :- in this we enter key and value pair.
Set set=hm.entrySet(); //HashMap is converted to set we have entrySet() in HashMap .

     Iterator itr=set.iterator();
     while(itr.hasNext())
     {
     Map.Entry en=(Map.Entry)itr.next();//typecasting the next() element with Map.Entry 
     System.out.println(en.getKey()+"   "+en.getValue());//Map.Entry has 2 methods getKey() and getValue()
-----------------------------------------------------------------------
Example-46
------------------------
import java.util.*;
public class HashMapExample 
{
public static void main(String[] args) {
	HashMap<Integer,String> hm=new HashMap<Integer,String>();
	hm.put(1, "Abhinav");
	hm.put(2, "Anna");
	hm.put(3, "Aditya");
	hm.put(4, "Kundan");
	hm.put(5, "Riya");
	hm.put(5, "prathyusha");
	System.out.println(hm);
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno and name");
	int rollno=ob.nextInt();
	String name=ob.next();
	hm.put(rollno,name);
	System.out.println(hm);
	Set set=hm.entrySet();//HashMap is convereted to set
	Iterator itr=set.iterator();
    while(itr.hasNext())
    {
    Map.Entry en=(Map.Entry)itr.next();//set is converted to Map
    System.out.println(en.getKey()+"   "+en.getValue());
}}}
----------------------------------------------------------------------------------------------
Example-47
----------------------
//HashMap:- In this we enter key and value pair.Key cannot be duplicate.

package org.monday;
import java.util.*;
public class LinkListDemo 
{
	public static void main(String[] args) 
	{
		    HashMap<Integer,String> hm=new HashMap<Integer,String>();
		    int[] a=new int[5];
		    String[] b=new String[5];
			hm.put(1, "Abhinav");
			hm.put(2, "Anna");
			hm.put(3, "Aditya");
			hm.put(4, "Kundan");
			hm.put(5, "Riya");
			hm.put(5, "prathyusha");
			System.out.println(hm);
			Scanner ob=new Scanner(System.in);
			System.out.println("enter rollno and name");
			int rollno=ob.nextInt();
			String name=ob.next();
			hm.put(rollno,name);
			for(int i=0;i<5;i++)
			{
				a[i]=ob.nextInt();
				b[i]=ob.next();
			hm.put(a[i],b[i]);
			}
					
			System.out.println(hm);
			}}
-----------------------------------------------------------------------------------------------------------------
Work of PMD
------------------------------------
automates code reviews and monitors code quality on every commit and pull request. 
It gives visibility into the technical debt and it can track code style and security issues, code coverage, code duplication, cyclomatic complexity and enforce best practices. Codacy is static analysis without the hassle.
---------------------------------------------------------------------------------------------------------------------------
JUNIT
-------------------------------------------------------------
package org.sandip;

public class Calculator
{
public int square(int i)
{
	return i*i;
}
public int add(int i,int j)
{
	return i+j;
}
public int sub(int i,int j)
{
	return i-j;
}
public int mul(int i,int j)
{
	return i*j;
}
public int div(int i,int j)
{
	return i/j;
}
public String user(String name)
{
	return "sandip";
}

public String concat(String string1,String string2)
{
	return string1+string2;
}
}
-----------------------------------------------------------
package org.sandip;

import static org.junit.Assert.*;
import org.junit.Test;
public class CalculatorTest
{
Calculator ob=new Calculator();
@Test
public void testSquare()
{
	assertEquals(25,ob.square(5));
	assertEquals(36,ob.square(6));
	
}
@Test
public void testOpt()
{
	assertEquals(25,ob.add(12, 13));
	assertEquals(-1,ob.sub(12, 13));
	assertEquals(25,ob.mul(5, 5));
	assertEquals(5,ob.div(10, 2));
	
}
@Test
public void testString()
{
	String result=ob.concat("Hello ","student");
	assertEquals("Hello student",result);
}

@Test
public void testUser()
{
	assertEquals("sandip",ob.user("sandip"));

}
@Test
public void compString()
{
	String s1="Hello";
	String s2="Hello";
	assertSame(s1,s2);
}


}
----------------------------------------------------------------------------

Maven project -------
groupid---org.sandip  <package name>
artifactid----JunitDemo  <project name>

google :- 
maven dependecy for JUNIT.
copy and paste in POM.XML
-----------------------------------------------------------------------------------------------------------------------
<dependencies>
  <!-- https://mvnrepository.com/artifact/junit/junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.11</version>
    <scope>test</scope>
</dependency>
  
  <!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
<dependency>
    <groupId>javax.servlet</groupId>
    <artifactId>javax.servlet-api</artifactId>
    <version>4.0.1</version>
    <scope>provided</scope>
</dependency>

  
  </dependencies>

---------------------------------------------------------------------------------
Example-2
----------------------------
package org.sandip;
import static org.junit.Assert.*;
import org.junit.Test;
public class Test1 
{

	@Test
	public void testString()
	{
		String str1=new String("apple");
		String str2=new String("apple");
		String str3=null;
		String str4="apple";
		String str5="apple";
		int val1=5;
		int val2=6;
		String[] expectedArray = {"one","two","three"};
		String[] resultArray = {"one","two","three"};
		
		//to check two objects are equal
		assertEquals(str1,str2);
		//to check two values is true
				assertTrue(val1< val2);
		//to check two values is true
				assertFalse(val1> val2);
		//to check an object is null
				assertNull(str3);
		//to check an object is not null
				assertNotNull(str1);
		//to check if the 2 objects refence point to the same object
		assertSame(str4,str5);
		//to check if the 2 objects refence point to the same object
				assertNotSame(str1,str5);
		//to check if the 2 arrays are equal to each other
				assertArrayEquals(expectedArray,resultArray);
	}
}
--------------------------------------------------------------------------------------------------------------
@BeforeClass  ----This will execute for one time.

@Before
@Test-------
@After

@Before
@Test-------
@After

@Before
@Test-------
@After

@AfterClass ----This will execute for one time.

-----------------------------------------------------------------------------
package org.sandip;
import static org.junit.Assert.assertEquals;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
public class Test2 
{
	Calculator ob=new Calculator();
@BeforeClass
public static void beforeclassSetup() throws Exception
{
	System.out.println("before class");
}
@Before
public  void beforetestSetup() throws Exception
{
	System.out.println("before test");
}
@Test
public void sumTest()
{
	assertEquals(10,ob.sum(4, 6));
}

@Test
public void subTest()
{
	assertEquals(10,ob.sub(16, 6));
}

@AfterClass
public static void afterclassSetup() throws Exception
{
	System.out.println("after class");
}
@After
public  void aftertestSetup() throws Exception
{
	System.out.println("after test");
}

}

----------------------------------------------------------------------------------------------------------------------
POM.XML
----------------------
Project Object Model
------------------------------------------
JDK17---------------------lib files
-----------------------------------------------------
jdbc  --ojdbc8.jar
servlet--servletApi.jar
spring----25 jar files.----------------------------------------
Hibernate ---15 jar files.
junit :- 3 jar files.
-------------------------------------------------------
1)manually we need to add the jar files.
-------------------------------------------------------
maven tool:-It has a repository.we need to mention the appliaction name with version .
It will automatically download from the repository.
and store it in the local machine.
The appliaction should be written in the POM.xml.

----------------------------------------------------------------------------------------------------------------------------------------
Exception Handling/error handling
------------------------------------------------------
1)compile time error----missing of semi-colon,spelling mistake we have to manually rectify it.
2)logical error----This is due to wrong logic.
3)runtime exception:- 
example:- end user enter age as ----22 years (input mismatch)
divide by zero error ---infinite (Arithmatic exception)
crossing the array limit.
--------------------------------------------------------
we are going to handle runtime exception only.
----------------------------------------------------------------------
								Exception

1)checked Exception :- you have to handle otherwise the program will not execute
i)SQLException
ii)IOException
iii)InteruptedException
iv)ServletException

2)unchecked Exception
i)ArithmaticException
ii)ArrayIndexOutOfBound Exception
iii)InputMismatch Exception

3)error
i)HardCrash
ii)StackOverflow
------------------------------------------------------------------------------------------------------------------------------
There are 5 keywords to handle the error.
i)try
ii)catch
iii)finally
iv)throw
v)throws
----------------------------------------------------
The main purpose of exception handling is to display the error message and the program should not terminate in between.
so we have to use try and catch block.
------------------------------
example-1
----------------------
package org.tuesday;
import java.util.*;
public class ExceptionDemo 
{
public static void main(String[] args) 
{
	try
	{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter 2 nos");
	int a =ob.nextInt();
	int b=ob.nextInt();
	int c=a/b;
	System.out.println("the result is "+c);
	}
	catch(Exception ae)
	{
		System.out.println("the error is "+ae);
	}
	System.out.println("this is the o/p");
}
}
--------------------------------------------------------------------------------------------------------------
example-2
-------------------
try with multile catch
-------------------------------------
package org.tuesday;
import java.util.*;
public class ExceptionDemo 
{
	public static void main(String[] args) 
	{
		try
		{
			Scanner ob=new Scanner(System.in);
			System.out.println("enter 2 nos");
		int a=ob.nextInt();
		int b=ob.nextInt();
		System.out.println("the result of div is "+(a/b));
		}
		
		catch(ArithmeticException ex)
		{
		System.out.println(ex);
		}
		catch(InputMismatchException ae)
		{
			System.out.println("the error is "+ae);
		}
		catch(Exception ae)
		{
			ae.printStackTrace();
		}
		System.out.println("this is the end of the prg");
	}
}
--------------------------------------------------------------------------
select the line.
source ----sorround with---try catch
------------------------------------------------------------------------------
try-catch block
------------------------
if the try block is successful of there is an error then the catch block will execute.
-------------------------------------------------
finally block:-
------------------------
This is used for closing of connections,class etc which you have opened during the program.
This block will definetly execute. the try is sucess or not it doesnot matter. 

----------------------------
example-3
--------------------
package org.tuesday;
import java.util.*;
public class ExceptionDemo 
{
	public static void main(String[] args) 
	{
		Scanner ob=new Scanner(System.in);
	try {

		System.out.println("enter 2 nos");
		int a=ob.nextInt();
		int b=ob.nextInt();
		System.out.println("the result of div is "+(a/b));
	} catch (Exception e) {
		e.printStackTrace();
	}
	finally
	{
		ob.close();
		System.out.println("this is the end of the prg");
	}
	}
}
----------------------------------------------------------------------------------------
Throws 
--------------
This is mainly used for checked exception.
example:-
i)SQLException
ii)IOException
iii)InteruptedException  (Thread)
iv)ServletException
--------------------------------------------------------------------------------------------------------
example-4
-------------------------
package org.tuesday;
import java.util.*;
public class ExceptionDemo extends Thread
{
	public static void main(String[] args) throws InterruptedException 
	{
		for(int i=1;i<=10;i++)
		{
			System.out.println(i);
			sleep(1000); //it is interrupting the flow control so we need to handle it.
		}
	}
}
----------------------------------------------------------------------------------------------------------------------------
throw :-It is used for user defined exception.
-------------------------------------------------------------------
example:- 
i)marks should be +ve
ii)salary should be greater than 18000
iii)age should be greater than 18 for vote.
-----------------------------------------------------------------------------------------
example-5
-------------------
package org.tuesday;
import java.util.*;
public class ExceptionDemo 
{
	public static void main(String[] args) throws Exception 
	{
		Scanner ob=new Scanner(System.in);
		System.out.println("enter your age");
		int age=ob.nextInt();
		if(age>=18)
			System.out.println("ok");
		else
			throw  new Exception("Age should be greater than or equal to 18 to vote"); 
	}
}
-----------------------------------------------------------------------------------------------------



















































































