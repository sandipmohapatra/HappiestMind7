Java
-------
1)It is a programming language.By this we can develop standalone application,web application,network appliaction,mobile application.
2)In java we save the file with the class name and the extension will be .java.After compilation it is converted to .class.It is in byte code.
3)Java is platform independent.(we can run java on any OS).
4)Java is simpler than c and c++ because we don't have pointer concept.We don't have operater overloading,multiple Inheritance.
5)In java we have Object oriented Programmings means we have class,object,Inheritance,polymerphisim,abstaction,Encapsulation.
i)class :- It contains variables and methods(collection of datamember and member functions).It is known as object factory.it is also known as blueprint of an object.

ii)object :- it is a reference pointer to a class.With object we can access the variables and methods of a class.It is also called as instance of class.

iii)inheritance :- It is used to reuse the existing code.java supports single inheritance.(multi-level,hirarcal).
when one object acquires all the properties and behaviours of a parent object it is known as Inheritance.
we have five types of inheritance
1)single is supported by java.
2)multi-level is supported by java. 
3)hyrarchal is supported by java.
4)mutiple is not supported by java
5)hybrid is not supported by java.

*in place of multiple and hybrid java use interface .
iv)polymerphisim:- poly means many ,merphisim means forms.
In this we have run time polymerphisim and we have compile time polymerphisim.

method overloading :-means method with same name but it has different datatypes the return type and parameter. 
It is also known as compile time polymerphisim.The compiler will deside to with method it should send the parameters.
example :-int sum(int a,int b);float sum(float a ,float b);

method overriding:- example of abstract class and Interface.we have to take atleast 2 classes for it.
In this the method name will be same and the parameter and return type datatype will be same.

v)abstraction :- Hiding internal mechanism only focusing on functionality.
example we switch on the light the light start glowing.The power generation is hidden only the functionality is displayed.

vi)encapsulation :- exmple :- capsule protect the medicin.Protecting of data and Wrapping up of Data Members and it's associated functions into single unit is known as encapsulation.
Protecting is done by the access specifiers.Java is highly secured.

We have 4 access specifiers in java .
1)private :- if we declare variables and methods as private we can access it within the class only. 
2)public :-if we declare variables and methods as public we can access it within the class ,outside the class and also outside the package. 
3)protected:- if we declare variables and methods as protected we can access it within the class and within the child class also. 
4)default:-if we declare variables and methods as default we can access it within the class ,outside the class but not  outside the package.

6)Java is portable, robust ,multithreaded.
----------------------------------------------------------------------------------------------------------------------------------------
operator
--------------
1)unary operator :- i++,i--,++i,--i
2)binary operator:-
i)Arithmatic :-+,-,*,/,%
ii)relational :->,<,<=,>=,=,!=
iii)logical :-&&,||
iv)bitwise :- &,|
v)shift :- >>,<<,>>>
3)ternary operator:- ?,:
-----------------------------
data type
---------------------
primary data type
-----------------------------
1)byte :- 1 byte 
2)short :- 2 bytes
3)int :- 4 bytes
4)long :- 8 bytes
5)float :- 4 bytes
6)double :- 8 bytes
7)char :- 2 bytes
8)boolean :-1 bit
-----------------------------------------------------
secondary data type (derive data type)
----------------------------------------------------
1)String
2)array
3)class
----------------------------
example-1
-----------------------
//class name should start with capital letters.it should start with number.
package org.sandip;

public class Firstjava 
{
public static void main(String[] args) 
{
	int a=10,b=20,c=a+b;
	System.out.println("the sum of 2 nos is "+c);
}
}
-------------------------------------------------------------------------------------------------------------------------------
example-2
-------------------
package org.sandip;

public class Secondjava 
{
public static void main(String[] args)
{
byte a=10;
short b=20;
float c=34.23f;
double d=34.32;
char e='a';
String f="apple";
int g=67;
long h=765;
System.out.println("the value of a "+a);
System.out.println("the value of b "+b);
System.out.println("the value of c"+c);
System.out.println("the value of d "+d +"the value of e is "+e);
System.out.println("the value of f  is "+f +"the value of g is "+g+"the value of h is "+h);
}
}
--------------------------------------------------------
example-3
--------------------
package org.sandip;
import java.lang.*; //default packages in java 
import java.util.*;//a package in java
public class Third
{
public static void main(String[] args) 
{
	Scanner ob=new Scanner(System.in);//it will take input from the user.
	System.out.println("enter 2 nos");
	int a=ob.nextInt();//accept int value as input
	int b=ob.nextInt();
	int c=a+b;
	System.out.println("the sum of 2 nos is"+c);
}
}
--------------------------------------------------------------------------
wap to enter 5 nos and find sum and average
---------------------------------------------------------
example-4
-----------------
package org.sandip;
import java.lang.*; 
import java.util.*;
public class Third
{
public static void main(String[] args) 
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter 5 nos");
	int a=ob.nextInt();
	int b=ob.nextInt();
	int c=ob.nextInt();
	int d=ob.nextInt();
	int e=ob.nextInt();
	
	System.out.println("the sum of 5 nos is :"+(a+b+c+d+e));
	System.out.println("the avg of 5 nos is :"+(a+b+c+d+e)/5);
	
}
}
----------------------------------------------------------------------------
example-5
-----------------------
package org.sandip;
import java.lang.*; 
import java.util.*;
public class Fourth
{
public static void main(String[] args) 
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter 5 nos");
	float a=ob.nextFloat();
	float b=ob.nextFloat();
	float c=ob.nextFloat();
	float d=ob.nextFloat();
	float e=ob.nextFloat();
	
	System.out.println("the sum of 5 nos is :"+(a+b+c+d+e));
	System.out.println("the avg of 5 nos is :"+(a+b+c+d+e)/5);
	
}
}
--------------------------------------------------------------------------
example-6
------------------
package org.sandip;
public class Third
{
public static void main(String x[])
//main is a method from which the program start executing.the compiler checks for the exact words
{
	String a=x[0];
	String b=x[1];
	String c=x[2];
	String d=x[3];
	System.out.println("the a value is "+a);
	System.out.println("the b value is "+b);
	System.out.println("the c value is "+c);
	System.out.println("the d value is "+d);
	}
}
---------------------------------------------------------------------
example-7
-------------------
package org.sandip;
public class Third
{
public static void main(String x[])
//main is a method from which the program start executing.the compiler checks for the exact words
{
	String a=x[0];
	String b=x[1];
	String c=x[2];
	String d=x[3];
	int sum=Integer.parseInt(a)+Integer.parseInt(b)+Integer.parseInt(c)+Integer.parseInt(d);
		System.out.println("the  sum is "+sum);
		//Integer.parseInt(a) :- convert the string value to integer. 
}
}
---------------------------------------------------------------------------------------------
*public static void main(String x[]) :compiler checks for the exact method.
-------------------------------------------------------------------------------------------------
example-8
------------------------------------
package org.sandip;
public class Third
{
public static void main(String ...x)//jdk1.8
//main is a method from which the program start executing.the compiler checks for the exact words
{
	String a=x[0];
	String b=x[1];
	String c=x[2];
	String d=x[3];
	int sum=Integer.parseInt(a)+Integer.parseInt(b)+Integer.parseInt(c)+Integer.parseInt(d);
		System.out.println("the  sum is "+sum);
		//Integer.parseInt(a) :- convert the string value to integer. 
}
}

---------------------------------------------------------------------------------------------------------------------------------------------------
JVM (Java Virtual Machine) is an abstract machine. It is called a virtual machine because it doesn't physically exist. It is a specification that provides a runtime environment in which Java bytecode can be executed. It can also run those programs which are written in other languages and compiled to Java bytecode.

JVMs are available for many hardware and software platforms. JVM, JRE, and JDK are platform dependent because the configuration of each OS is different from each other. However, Java is platform independent. There are three notions of the JVM: specification, implementation, and instance.

The JVM performs the following main tasks:

Loads code
Verifies code
Executes code
Provides runtime environment
-------------------------------------------------------------------------------------------------------------------------------------------------
JRE is an acronym for Java Runtime Environment. It is also written as Java RTE. The Java Runtime Environment is a set of software tools which are used for developing Java applications. It is used to provide the runtime environment. It is the implementation of JVM. It physically exists. It contains a set of libraries + other files that JVM uses at runtime.
-------------------------------------------------------------------------------------------------------------------------------------
JDK is an acronym for Java Development Kit. The Java Development Kit (JDK) is a software development environment which is used to develop Java applications and applets. It physically exists. It contains JRE + development tools.

JDK is an implementation of any one of the below given Java Platforms released by Oracle Corporation:

Standard Edition Java Platform
Enterprise Edition Java Platform
Micro Edition Java Platform
---------------------------------------------------------------------------------------------------------------------
Memory Management in Java
In Java, memory management is the process of allocation and de-allocation of objects, called Memory management. Java does memory management automatically. Java uses an automatic memory management system called a garbage collector. Thus, we are not required to implement memory management logic in our application. Java memory management divides into two major parts:

JVM Memory Structure
Working of the Garbage Collector
--------------------------------------------------------------------------------------------------
JVM Memory Structure
JVM creates various run time data areas in a heap. These areas are used during the program execution. The memory areas are destroyed when JVM exits, whereas the data areas are destroyed when the thread exits.
--------------------------------------------------------------------------------------------------------------------
Method Area
Method Area is a part of the heap memory which is shared among all the threads. It creates when the JVM starts up. It is used to store class structure, superclass name, interface name, and constructors.
-------------------------------------------------------------------------------------------------------------------------------------
Heap Area
Heap stores the actual objects. It creates when the JVM starts up. The user can control the heap if needed. It can be of fixed or dynamic size. When you use a new keyword, the JVM creates an instance for the object in a heap. While the reference of that object stores in the stack. There exists only one heap for each running JVM process. When heap becomes full, the garbage is collected.
-------------------------------------------------------------------------------------------------------------------------
Stack Area
Stack Area generates when a thread creates. It can be of either fixed or dynamic size. The stack memory is allocated per thread. It is used to store data and partial results. It contains references to heap objects. It also holds the value itself rather than a reference to an object from the heap. The variables which are stored in the stack have certain visibility, called scope.
---------------------------------------------------------------------------------------------------------------
ClassLoader: ClassLoader is a subsystem used to load class files. ClassLoader first loads the Java code whenever we run it.
--------------------------------------------------------------------------------------------------------------------------
Class Method Area: In the memory, there is an area where the class data is stored during the code's execution. Class method area holds the information of static variables, static methods, static blocks, and instance methods.
--------------------------------------------------------------------------------------------------------------
Heap: The heap area is a part of the JVM memory and is created when the JVM starts up. Its size cannot be static because it increase or decrease during the application runs.
----------------------------------------------------------------------------------------------------
Stack: It is also referred to as thread stack. It is created for a single execution thread. The thread uses this area to store the elements like the partial result, local variable, data used for calling method and returns etc.
-------------------------------------------------------------------------------------------------
Native Stack: It contains the information of all the native methods used in our application.
----------------------------------------------------------------------------------------------------------------
Execution Engine: It is the central part of the JVM. Its main task is to execute the byte code and execute the Java classes. The execution engine has three main components used for executing Java classes.
------------------------------------------------------------------------------------------------------------------
Interpreter: It converts the byte code into native code and executes. It sequentially executes the code. The interpreter interprets continuously and even the same method multiple times. This reduces the performance of the system, and to solve this, the JIT compiler is introduced.
-------------------------------------------------------------------------------------------------------------------------------
JIT Compiler: JIT compiler is introduced to remove the drawback of the interpreter. It increases the speed of execution and improves performance.
------------------------------------------------------------------------------------------------------
Garbage Collector: The garbage collector is used to manage the memory, and it is a program written in Java. It works in two phases, i.e., Mark and Sweep. Mark is an area where the garbage collector identifies the used and unused chunks of memory. The Sweep removes the identified object from the Mark
Java Native Interface

Java Native Interface works as a mediator between Java method calls and native libraries.

Java Runtime Environment
It provides an environment in which Java programs are executed. JRE takes our Java code, integrates it with the required libraries, and then starts the JVM to execute it. To learn more about the Java Runtime Environment, click here.
---------------------------------------------------------------------------------------------------------------------------------------------
Conditional statement
--------------------------------------
1)if-----else
2)if-----else if----else if-----else
---------------------------------------------------
example-8
---------------------
package org.tuesday;
import java.util.*;
public class First 
{
public static void main(String[] args)
{
Scanner ob=new Scanner(System.in);//to will take input from the keyboard
System.out.println("enter 2 nos");
int a=ob.nextInt();
int b=ob.nextInt();
if(a>b)
{
	System.out.println("The greatest is "+a);
	System.out.println("greatest is "+a);
}
else
{
	System.out.println("The greatest is "+b);
	System.out.println(" greatest is "+b);
	
}
}
}
-------------------------------------------------------------------
example-9
-----------------------
package org.tuesday;
import java.util.*;
public class First 
{
public static void main(String[] args)
{
Scanner ob=new Scanner(System.in);//to will take input from the keyboard
System.out.println("enter 3 nos");
int a=ob.nextInt();
int b=ob.nextInt();
int c=ob.nextInt();
if(a>b && a>c)
	System.out.println("The greatest is "+a);
	else if(b>a && b>c)
	System.out.println("The greatest is "+b);
	else
		System.out.println("The greatest is "+c);
	}
}
----------------------------------------------------------------------------------------
System.in :- System is a class and in is a object.
System.out.println() :- System is a class ,out is an object and println() is a method.
-------------------------------------------------------------------------------
The predefined class in java will start with capital letter.
------------------------------------------------------------------------------
First ob=new First();
--->First is a class.
--->First() is a construstor.

Scanner ob=new Scanner(System.in);

System.in is a parameter.
Scanner is a class belong to util package. 

System is a class which belong to lang package.
---------------------------------------------------------------------------
package---->classes---->function/methods()
----------------------------------------------------------------
set path=C:\Program Files\Java\jdk-17.0.3.1\bin;.;
--------------------------------------------------------------------
javap java.lang.String
javap java.util.Scanner
--------------------------------------------------------
wap to enter a student's data
rollno,name,address and 3 subjects marks(m1,m2,m3)
find sum and average.
if average greater than 70 print ("first division")
if average greater than 60 print ("second division")
if average greater than 50 print ("third division")
else 
fail
-------------------------------------------------------------------------------------
example-10
---------------------
package org.tuesday;
import java.util.*;
public class Student 
{
public static void main(String[] args)
{
int rollno,m1,m2,m3;
String name,address;
Scanner ob=new Scanner(System.in);//to will take input from the keyboard
System.out.println("enter rollno,name,address,m1,m2,m3");
rollno=ob.nextInt();
name=ob.next();
address=ob.next();
m1=ob.nextInt();
m2=ob.nextInt();
m3=ob.nextInt();
int sum=m1+m2+m3;
int avg=sum/3;
System.out.println("Rollno is: "+rollno +"Name is :"+name+"The address is:"+address);
System.out.println("Sum is: "+sum+"The average is :"+avg);
if(avg>=70)
	System.out.println("First Division");
else if(avg>=60)
	System.out.println("Second Division");
else if(avg>=50)
	System.out.println("Third Division");
else
	System.out.println("Fail");
}
}
-----------------------------------------------------------------------------------------------------
package org.tuesday;
import java.util.*;
public class Student 
{
public static void main(String[] args)
{
String rollno,m1,m2,m3;
String name,address;
Scanner ob=new Scanner(System.in);//to will take input from the keyboard
System.out.println("enter rollno,name,address,m1,m2,m3");
rollno=ob.nextLine();
name=ob.nextLine();
address=ob.nextLine();
m1=ob.nextLine();
m2=ob.nextLine();
m3=ob.nextLine();
int sum=Integer.parseInt(m1)+Integer.parseInt(m2)+Integer.parseInt(m3);
int avg=sum/3;
System.out.println("Rollno is: "+rollno +"Name is :"+name+"The address is:"+address);
System.out.println("Sum is: "+sum+"The average is :"+avg);
if(avg>=70)
	System.out.println("First Division");
else if(avg>=60)
	System.out.println("Second Division");
else if(avg>=50)
	System.out.println("Third Division");
else
	System.out.println("Fail");
}
}
----------------------------------------------------------------------------------
Case and Switch
---------------------------------------
In this we have a value given to the switch.The switch will jump to the particular case execute it and terminate.

switch(2)
{
case 1:
	break;
case 2:
	break;
default:
}

----------------------------------------------------------------------------------
example-11
----------------------
package org.tuesday;
import java.util.*;
public class Second 
{
public static void main(String[] args)
{
Scanner ob=new Scanner(System.in);
System.out.println("enter a no");
int x=ob.nextInt();
switch(x)
{
case 1:System.out.println("one");
break;
case 2:System.out.println("two");
break;
case 3:System.out.println("three");
break;
case 4:System.out.println("four");
break;
case 5:System.out.println("five");
break;
default:
System.out.println("wrong input");
}

	}
}
-----------------------------------------------------------------------
 Bank
---------------
enter accno,name,initial balance=5000.
we have 2 options deposite and withdraw .(case and switch)
after withdraw the minimal balance should be greater or equal to1000.
finally display the accno,name,final balance.
-------------------------------------------------------------------
example-12
--------------------
package org.tuesday;
import java.util.*;
public class Second 
{
public static void main(String[] args)
{
Scanner ob=new Scanner(System.in);
int accno,ibal,fbal;
String name,choice;
System.out.println("enter your accno,name ,ibal and choice");
accno=ob.nextInt();
name=ob.next();
ibal=ob.nextInt();
choice=ob.next();
switch(choice)
{

case "deposite":System.out.println("enter amount to deposite");
int dep=ob.nextInt();
fbal=ibal+dep;
System.out.println("The final balance is "+fbal);
break;

case "withdraw":System.out.println("enter amount to withdraw");
int wdraw=ob.nextInt();
if(ibal-wdraw>=1000)
{
	fbal=ibal-wdraw;
	System.out.println("The final balance is "+fbal);
}
else
{
	System.out.println("The balance is low you cannot withdraw it");
}
break;
default:System.out.println("wrong input");
}
}}
---------------------------------------------------------------------------------------------------------------
Array :- it is a collection of similar data type.The array index start from 0.The memory size is fixed at the begining.
int array,float array......
----------------------------------------------------------------
new is a keyword used to create memory blocks.
---------------------------------------------------------------------
example-13
-------------------------------------------
package org.tuesday;
import java.util.*;
class Second
{
	public static void main(String[] args) 
	{
		Scanner ob=new Scanner(System.in);
	int a[]=new int[5];
	String b[]=new String[5];
	
	System.out.println("enter 5 nos");
	for(int i=0;i<5;i++)
	a[i]=ob.nextInt();
	
	System.out.println("enter 5 string");
	for(int i=0;i<5;i++)
	b[i]=ob.next();
	
	System.out.println("the 5 nos are");
	for(int i=0;i<5;i++)
		System.out.println(a[i]);
	
	System.out.println("the 5 strings are");
	for(int i=0;i<5;i++)
		System.out.println(b[i]);
		
	}
}
-----------------------------------------------------------------------------------------
example-14
---------------------
package org.tuesday;
import java.util.*;
class Second
{
	public static void main(String[] args) 
	{
		Scanner ob=new Scanner(System.in);
	int a[][]=new int[3][3];
	
	System.out.println("enter 3*3 matrix");
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<3;j++)
		{
	a[i][j]=ob.nextInt();		
}		}
	
	System.out.println("the 3*3 matrix is");
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<3;j++)
		{
			System.out.print(a[i][j]+"   ");
		}
		System.out.println();	}			
}}
----------------------------------------------------------------------------------------------------
example-15
----------------------
package org.tuesday;
import java.util.*;
class Second
{
	public static void main(String[] args) 
	{
		Scanner ob=new Scanner(System.in);
	int a[][]=new int[3][3];
	int b[][]=new int[3][3];
	int c[][]=new int[3][3];
	
	System.out.println("enter 3*3 matrix");
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<3;j++)
		{
	a[i][j]=ob.nextInt();		
	}		}
	
	
	System.out.println("enter 3*3 matrix");
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<3;j++)
		{
	b[i][j]=ob.nextInt();		
	}		}
	
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<3;j++)
		{
	c[i][j]=a[i][j]+b[i][j];		
	}		}
	
	System.out.println("the 3*3 matrix is");
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<3;j++)
		{
			System.out.print(c[i][j]+"   ");
		}
		System.out.println();	
		}
	}}
-----------------------------------------------------------------------------------------------------------
example-16
-----------------------
package org.tuesday;
import java.util.*;
class Second
{
	int rollno;//intance variable can be accessed through out the class
	String name,address;
	void input()
	{
	int x=10;//local variable can be accessed within the method	
		Scanner ob=new Scanner(System.in);
		System.out.println("Enter rollno,name,address");
		rollno=ob.nextInt();
		name=ob.next();
		address=ob.next();
	}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
public static void main(String[] args) 
{
Second ob=new Second();
//Second is the class name,ob is the object or ref pointer,new is keyword which will create a memory block,Second() is a constructor
ob.input(); //with the object we can access variables and methods of a class.
ob.display();
System.out.println(ob.rollno);
System.out.println(ob.name);
System.out.println(ob.address);
}
}
-------------------------------------------------------------------------------------------------------------------------

example-17
------------------------
//how to create array of objects.

package org.tuesday;
import java.util.*;
class Second
{
	int rollno;
	String name,address;
	void input()
	{
	int x=10;
		Scanner ob=new Scanner(System.in);
		System.out.println("Enter rollno,name,address");
		rollno=ob.nextInt();
		name=ob.next();
		address=ob.next();
	}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
public static void main(String[] args) 
{
	Scanner ob1=new Scanner(System.in);
	System.out.println("how many objects want to create");
	int x=ob1.nextInt();
Second[] ob=new Second[x]; 

for(int i=0;i<x;i++)
{
ob[i]=new Second();
	ob[i].input(); 
}

for(int i=0;i<x;i++)
{
	ob[i].display(); 
}

}
}
-------------------------------------------------------------------------
example-18
-----------------------
//how to create array of objects.

package org.tuesday;
import java.util.*;
class Second
{
	int rollno;
	String name,address;
	void input()
	{
	int x=10;
		Scanner ob=new Scanner(System.in);
		System.out.println("Enter rollno,name,address");
		rollno=ob.nextInt();
		name=ob.next();
		address=ob.next();
	}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
public static void main(String[] args) 
{
	Scanner ob1=new Scanner(System.in);
	System.out.println("how many objects want to create");
	int x=ob1.nextInt();
Second[] ob=new Second[x]; 

for(int i=0;i<x;i++)
{
ob[i]=new Second();
	ob[i].input(); 
}

System.out.println("enter the rollno whose details you want to display");
int temp=ob1.nextInt();
int z=0;
for(int i=0;i<x;i++)
{
	if(ob[i].rollno==temp)
	{
	ob[i].display();
	z++;
	}}
if(z==0)
System.out.println("data not found");
}}
//---------------------------------------------------------------------
//bank customer:- accno,name,balance
//enter the accno to see particular customer details... 
//---------------------------------------------------------------------

constructor:- constructor is a function which has the same name of that of the class name.
it doesnot have return type nor it returns any value.
a constructor excute automatically when an object is created for the class.
There are 2 types of contructor 
1)default constructor
2)parameterized constructor
------------------------------------------
example-19
-------------------
package org.wednesday;

public class ConstructorDemo 
{
int rollno; //intance variable
String name,address;
ConstructorDemo()
{
	System.out.println("default constructor");
}
ConstructorDemo(int rollno,String name,String address)//local variables
{
	//to distingush between local and instance variable we use this keyword
	this.rollno=rollno;
	this.name=name;
	this.address=address;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
public static void main(String[] args) 
{
	ConstructorDemo ob=new ConstructorDemo();
	ConstructorDemo ob1=new ConstructorDemo(1,"sandip","Bangalore");
	ob1.display();
	ConstructorDemo ob2=new ConstructorDemo(2,"kiran","Bangalore");
	ob2.display();
}
}
---------------------------------------------------------------------
example-20
----------------------
package org.wednesday;

public class ConstructorDemo 
{
int rollno; //intance variable
String name,address;
ConstructorDemo()
{
	System.out.println("default constructor");
}
ConstructorDemo(int rollno,String name,String address)//local variables
{
	//to distingush between local and instance variable we use this keyword
	this.rollno=rollno;
	this.name=name;
	this.address=address;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
int sum(int a,int b)   //return type is int
{
	return a+b;
}
float sum(float a,float b)  //return type is float
{
	return a+b;
}
public static void main(String[] args) 
{
	ConstructorDemo ob=new ConstructorDemo();
	ConstructorDemo ob1=new ConstructorDemo(1,"sandip","Bangalore");
	ob1.display();
	ConstructorDemo ob2=new ConstructorDemo(2,"kiran","Bangalore");
	ob2.display();
	
	System.out.println("the sum of 2 nos are "+ob.sum(13, 34));
	System.out.println("the sum of 2 nos are "+ob.sum(13.4f, 34.7f));
	System.out.println("the sum of 2 nos are "+ob.sum(133, 134));
}
}
--------------------------------------------------------------------
function/method :-
They can have any name other than the class name.It return a value and has return type.
if it doesnot return any value we use the keyword void.
if you are using the same function name with different return type and datatypes of the parameters are different then it is known as function overloading .
It is also known as compile time poly-merphisim.
The compiler will deside where to send the parameters.
------------------------------------------------------------------------------------------------------------






























































































