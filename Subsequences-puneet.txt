Subsequences
 
 You are given an array of size N, and the array only contains integers 1,2, 3.
 Your task is to divide the given array into the subsequences in such a way that each element of the array belongs to exactly one subsequence, and each subsequence looks like "123123 ..." or "231231....." or "312312...." (i.e., the subsequence should not contain two same adjacent elements).
 
 Find the minimum number of subsequences required
 
 Note
 A subsequence is a sequence that can be derived from the given sequence by deleting zero or more elements without changing the order of the remaining elements. For example, subsequences of "1231121" are "1", "23", "32", "1111", "221", "1121", but not "213", "112321" and "231211".
 
 Function Description
 In the provided code snippet, implement the provided findSubsequences(...) method.
 You can write your code in the space below the phrase “WRITE YOUR LOGIC HERE”.
 There will be multiple test cases running so the Input and Output should match exactly as provided.
 
 Input Format
 First line contains an integer N, which denotes size of the array
 Second line contains N space separated integers denote the input array A
 
 Sample Input
 9
 1 1 3 1 2 3 2 2 3
 
 Constraints
 1<=N<=1000000
 
 Output Format
 Single integer minimum number of subsequences
 
 Sample Output
 3
 
 Explanation
 1st subsequence = {1, 2, 3}
 
 1 1 3 1 2 3 2 2 3 (elements 1st, 8th, 9th)
 2nd subsequence = {1, 2}
 
 1 1 3 1 2 3 2 2 3 (elements 2nd and 7th)
 3rd subsequence = {3 1 2 3}
 
 1 1 3 1 2 3 2 2 3 (elements 3rd to 6th)
 1 1 3 1 2 3 2 2 3 (every element belong to exactly 1 subsequence)
 
 Hence Answer is 3.