Concatenating Array
 
 You are given an array of integers A of size N, and an integer K.
 
 You need to find the largest sum of the subarray after concatenating the given array K times.
 
 Function Description
 In the provided code snippet, implement the provided concatenatingArray(...) method using the variables to print the largest sum of the subarray after concatenating the given array K times. You can write your code in the space below the phrase “WRITE YOUR LOGIC HERE”. 
 
There will be multiple test cases running so the Input and Output should match exactly as provided.
 
 
 Input Format
 The first line contains a single integer N, denoting the size of the array.
 The second line contains a single integer K.
 Next n lines contain an integer A[i].
 
 Sample Input
 3 -- denotes N
 2 -- denotes K
 -1 -- denotes A[0]
 10 -- denotes A[1]
 20 -- denotes A[2]
 
 Constraints
 1 ≤ N, K ≤ 10^3
 10-5 ≤ A[i] ≤ 10^5
 
 Output Format
 The output contains a single integer denoting the largest sum of the subarray after concatenating the given array K times.

--------------------------------------------------------------------------------------------------------
import java.util.*; 
 import java.lang.*;
 import java.io.*;
 import java.lang.Math;
 
 public class Main {
  public static int concatenatingArray(int N, int K, int A[]) {
  
  //this is default OUTPUT. You can change it.
  int result=-404;
  
  //write your Logic here:
  
  //Creating a new empty ArrayList to hold all the elements of the array 'A'
  List<Integer>list=new ArrayList<Integer>();
  for(int num:A)
	  list.add(num);
  //Creating a new empty ArrayList to hold the array concatenated 'K' times
  List<Integer>concatenatedList=new ArrayList<Integer>();
  for(int i=0;i<K;i++)
	  concatenatedList.addAll(list);
  
  //Obtaining an array from the concatenated list
  int[]A1=new int[concatenatedList.size()];
  int indx=0;
  for(int num:concatenatedList)
  {
	  A1[indx]=num;
	  System.out.println(num+" ");
	  indx++;
  }
  //Calculating the maximum of the sum of all the elements
  //of the sub array obtained from the array 'A1'
  int sum=0,max=Integer.MIN_VALUE;
  
  for (int i = 0; i < A1.length; i++)
  {
       sum = 0;
      for (int j = i; j < A1.length; j++)
      {
          sum += A1[j];
          if (sum > max)
              max = sum;
      }
  }
  
  result=max;
  return result;
  }
  public static void main(String[] args) {

  
  
  // INPUT [uncomment & modify if required]
  Scanner sc = new Scanner(System.in);
  int N = sc.nextInt();
  int K = sc.nextInt();
  int A [] = new int[N];
  for(int i=0; i<N; i++) {
  A[i] = sc.nextInt();
  }
  
  // OUTPUT [uncomment & modify if required]
  System.out.print(concatenatingArray(N,K,A));
  sc.close();
  }
 }
------------------------------------------------------------------------------------------------